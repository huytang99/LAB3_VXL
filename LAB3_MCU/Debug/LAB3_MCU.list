
LAB3_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003154  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003280  08003280  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003280  08003280  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003280  08003280  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080032f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080032f8  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f46  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abf  00000000  00000000  00028fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca3  00000000  00000000  0002bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb20  00000000  00000000  00042b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082358  00000000  00000000  0004e663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d09bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000297c  00000000  00000000  000d0a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003248 	.word	0x08003248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003248 	.word	0x08003248

0800014c <is_Button1_Pressed>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int downtime = 100;

int TimeOutForKeyPress =  10;
int is_Button1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_Button1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_Button1_Pressed+0x16>
	{
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_Button1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_Button1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000008c 	.word	0x2000008c

08000170 <is_Button2_Pressed>:
int is_Button2_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_Button2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_Button2_Pressed+0x16>
	{
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_Button2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_Button2_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000090 	.word	0x20000090

08000194 <is_Button3_Pressed>:
int is_Button3_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_Button3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_Button3_Pressed+0x16>
	{
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_Button3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_Button3_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000094 	.word	0x20000094

080001b8 <subKeyProcess_1>:

void subKeyProcess_1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag=1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess_1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000008c 	.word	0x2000008c

080001d0 <subKeyProcess_2>:
void subKeyProcess_2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag=1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess_2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000090 	.word	0x20000090

080001e8 <subKeyProcess_3>:
void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag=1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000094 	.word	0x20000094

08000200 <getKeyInput1>:
void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000204:	4b22      	ldr	r3, [pc, #136]	; (8000290 <getKeyInput1+0x90>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <getKeyInput1+0x94>)
 800020a:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <getKeyInput1+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <getKeyInput1+0x90>)
 8000212:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4820      	ldr	r0, [pc, #128]	; (800029c <getKeyInput1+0x9c>)
 800021a:	f001 ffd5 	bl	80021c8 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <getKeyInput1+0x98>)
 8000224:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <getKeyInput1+0x90>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <getKeyInput1+0x98>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d12b      	bne.n	800028a <getKeyInput1+0x8a>
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <getKeyInput1+0x90>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <getKeyInput1+0x94>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d125      	bne.n	800028a <getKeyInput1+0x8a>
    if (KeyReg2 != KeyReg3){
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput1+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <getKeyInput1+0xa0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput1+0x66>
      KeyReg3 = KeyReg2;
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <getKeyInput1+0x94>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <getKeyInput1+0xa0>)
 8000250:	6013      	str	r3, [r2, #0]

      if (KeyReg2 == PRESSED_STATE){
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <getKeyInput1+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <getKeyInput1+0x8a>
        TimeOutForKeyPress = 100;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <getKeyInput1+0xa4>)
 800025c:	2264      	movs	r2, #100	; 0x64
 800025e:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 8000260:	f7ff ffaa 	bl	80001b8 <subKeyProcess_1>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 8000264:	e011      	b.n	800028a <getKeyInput1+0x8a>
       TimeOutForKeyPress --;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <getKeyInput1+0xa4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <getKeyInput1+0xa4>)
 800026e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <getKeyInput1+0xa4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d108      	bne.n	800028a <getKeyInput1+0x8a>
        	if (KeyReg2 == PRESSED_STATE){
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput1+0x94>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getKeyInput1+0x84>
        		subKeyProcess_1();
 8000280:	f7ff ff9a 	bl	80001b8 <subKeyProcess_1>
        	TimeOutForKeyPress = 100;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <getKeyInput1+0xa4>)
 8000286:	2264      	movs	r2, #100	; 0x64
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000008 	.word	0x20000008
 8000298:	20000000 	.word	0x20000000
 800029c:	40011000 	.word	0x40011000
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	20000030 	.word	0x20000030

080002a8 <getKeyInput3>:
void getKeyInput3(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 80002ac:	4b22      	ldr	r3, [pc, #136]	; (8000338 <getKeyInput3+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <getKeyInput3+0x94>)
 80002b2:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <getKeyInput3+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <getKeyInput3+0x90>)
 80002ba:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80002bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <getKeyInput3+0x9c>)
 80002c2:	f001 ff81 	bl	80021c8 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <getKeyInput3+0x98>)
 80002cc:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <getKeyInput3+0x90>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <getKeyInput3+0x98>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d12b      	bne.n	8000332 <getKeyInput3+0x8a>
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <getKeyInput3+0x90>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <getKeyInput3+0x94>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d125      	bne.n	8000332 <getKeyInput3+0x8a>
    if (KeyReg10 != KeyReg11){
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <getKeyInput3+0x94>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <getKeyInput3+0xa0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d00d      	beq.n	800030e <getKeyInput3+0x66>
      KeyReg11 = KeyReg10;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <getKeyInput3+0x94>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <getKeyInput3+0xa0>)
 80002f8:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <getKeyInput3+0x94>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d117      	bne.n	8000332 <getKeyInput3+0x8a>
        TimeOutForKeyPress = 100;
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <getKeyInput3+0xa4>)
 8000304:	2264      	movs	r2, #100	; 0x64
 8000306:	601a      	str	r2, [r3, #0]
        subKeyProcess_3();
 8000308:	f7ff ff6e 	bl	80001e8 <subKeyProcess_3>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 800030c:	e011      	b.n	8000332 <getKeyInput3+0x8a>
       TimeOutForKeyPress --;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <getKeyInput3+0xa4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <getKeyInput3+0xa4>)
 8000316:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <getKeyInput3+0xa4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d108      	bne.n	8000332 <getKeyInput3+0x8a>
        	if (KeyReg10 == PRESSED_STATE){
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <getKeyInput3+0x94>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <getKeyInput3+0x84>
        		subKeyProcess_3();
 8000328:	f7ff ff5e 	bl	80001e8 <subKeyProcess_3>
        	TimeOutForKeyPress = 100;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <getKeyInput3+0xa4>)
 800032e:	2264      	movs	r2, #100	; 0x64
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000024 	.word	0x20000024
 800033c:	20000028 	.word	0x20000028
 8000340:	20000020 	.word	0x20000020
 8000344:	40011000 	.word	0x40011000
 8000348:	2000002c 	.word	0x2000002c
 800034c:	20000030 	.word	0x20000030

08000350 <getKeyInput2>:
void getKeyInput2(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <getKeyInput2+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <getKeyInput2+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <getKeyInput2+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <getKeyInput2+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <getKeyInput2+0x9c>)
 800036a:	f001 ff2d 	bl	80021c8 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <getKeyInput2+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <getKeyInput2+0x90>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <getKeyInput2+0x98>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12b      	bne.n	80003da <getKeyInput2+0x8a>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <getKeyInput2+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <getKeyInput2+0x94>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d125      	bne.n	80003da <getKeyInput2+0x8a>
    if (KeyReg6 != KeyReg7){
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <getKeyInput2+0x94>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <getKeyInput2+0xa0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00d      	beq.n	80003b6 <getKeyInput2+0x66>
      KeyReg7 = KeyReg6;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <getKeyInput2+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <getKeyInput2+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]

      if (KeyReg6 == PRESSED_STATE){
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <getKeyInput2+0x94>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d117      	bne.n	80003da <getKeyInput2+0x8a>
        TimeOutForKeyPress = 100;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <getKeyInput2+0xa4>)
 80003ac:	2264      	movs	r2, #100	; 0x64
 80003ae:	601a      	str	r2, [r3, #0]
        subKeyProcess_2();
 80003b0:	f7ff ff0e 	bl	80001d0 <subKeyProcess_2>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 80003b4:	e011      	b.n	80003da <getKeyInput2+0x8a>
       TimeOutForKeyPress --;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <getKeyInput2+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <getKeyInput2+0xa4>)
 80003be:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <getKeyInput2+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <getKeyInput2+0x8a>
        	if (KeyReg6 == PRESSED_STATE){
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <getKeyInput2+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <getKeyInput2+0x84>
        		subKeyProcess_2();
 80003d0:	f7ff fefe 	bl	80001d0 <subKeyProcess_2>
        	TimeOutForKeyPress = 100;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <getKeyInput2+0xa4>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000014 	.word	0x20000014
 80003e4:	20000018 	.word	0x20000018
 80003e8:	20000010 	.word	0x20000010
 80003ec:	40011000 	.word	0x40011000
 80003f0:	2000001c 	.word	0x2000001c
 80003f4:	20000030 	.word	0x20000030

080003f8 <display7SEG>:
#include "display_led.h"
#include "global.h"
#include "main.h"

void display7SEG(int num)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

	if(num == 0){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d122      	bne.n	800044c <display7SEG+0x54>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	48bd      	ldr	r0, [pc, #756]	; (8000700 <display7SEG+0x308>)
 800040c:	f001 fef3 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	48ba      	ldr	r0, [pc, #744]	; (8000700 <display7SEG+0x308>)
 8000416:	f001 feee 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	48b8      	ldr	r0, [pc, #736]	; (8000700 <display7SEG+0x308>)
 8000420:	f001 fee9 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	48b5      	ldr	r0, [pc, #724]	; (8000700 <display7SEG+0x308>)
 800042a:	f001 fee4 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2110      	movs	r1, #16
 8000432:	48b3      	ldr	r0, [pc, #716]	; (8000700 <display7SEG+0x308>)
 8000434:	f001 fedf 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	48b0      	ldr	r0, [pc, #704]	; (8000700 <display7SEG+0x308>)
 800043e:	f001 feda 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	48ae      	ldr	r0, [pc, #696]	; (8000700 <display7SEG+0x308>)
 8000448:	f001 fed5 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 1){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d122      	bne.n	8000498 <display7SEG+0xa0>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2101      	movs	r1, #1
 8000456:	48aa      	ldr	r0, [pc, #680]	; (8000700 <display7SEG+0x308>)
 8000458:	f001 fecd 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2102      	movs	r1, #2
 8000460:	48a7      	ldr	r0, [pc, #668]	; (8000700 <display7SEG+0x308>)
 8000462:	f001 fec8 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2104      	movs	r1, #4
 800046a:	48a5      	ldr	r0, [pc, #660]	; (8000700 <display7SEG+0x308>)
 800046c:	f001 fec3 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2108      	movs	r1, #8
 8000474:	48a2      	ldr	r0, [pc, #648]	; (8000700 <display7SEG+0x308>)
 8000476:	f001 febe 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2110      	movs	r1, #16
 800047e:	48a0      	ldr	r0, [pc, #640]	; (8000700 <display7SEG+0x308>)
 8000480:	f001 feb9 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	489d      	ldr	r0, [pc, #628]	; (8000700 <display7SEG+0x308>)
 800048a:	f001 feb4 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	489b      	ldr	r0, [pc, #620]	; (8000700 <display7SEG+0x308>)
 8000494:	f001 feaf 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 2){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d122      	bne.n	80004e4 <display7SEG+0xec>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4897      	ldr	r0, [pc, #604]	; (8000700 <display7SEG+0x308>)
 80004a4:	f001 fea7 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2102      	movs	r1, #2
 80004ac:	4894      	ldr	r0, [pc, #592]	; (8000700 <display7SEG+0x308>)
 80004ae:	f001 fea2 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2104      	movs	r1, #4
 80004b6:	4892      	ldr	r0, [pc, #584]	; (8000700 <display7SEG+0x308>)
 80004b8:	f001 fe9d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2108      	movs	r1, #8
 80004c0:	488f      	ldr	r0, [pc, #572]	; (8000700 <display7SEG+0x308>)
 80004c2:	f001 fe98 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2110      	movs	r1, #16
 80004ca:	488d      	ldr	r0, [pc, #564]	; (8000700 <display7SEG+0x308>)
 80004cc:	f001 fe93 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	488a      	ldr	r0, [pc, #552]	; (8000700 <display7SEG+0x308>)
 80004d6:	f001 fe8e 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	4888      	ldr	r0, [pc, #544]	; (8000700 <display7SEG+0x308>)
 80004e0:	f001 fe89 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 3){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d122      	bne.n	8000530 <display7SEG+0x138>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4884      	ldr	r0, [pc, #528]	; (8000700 <display7SEG+0x308>)
 80004f0:	f001 fe81 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	4881      	ldr	r0, [pc, #516]	; (8000700 <display7SEG+0x308>)
 80004fa:	f001 fe7c 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2104      	movs	r1, #4
 8000502:	487f      	ldr	r0, [pc, #508]	; (8000700 <display7SEG+0x308>)
 8000504:	f001 fe77 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	487c      	ldr	r0, [pc, #496]	; (8000700 <display7SEG+0x308>)
 800050e:	f001 fe72 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2110      	movs	r1, #16
 8000516:	487a      	ldr	r0, [pc, #488]	; (8000700 <display7SEG+0x308>)
 8000518:	f001 fe6d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	4877      	ldr	r0, [pc, #476]	; (8000700 <display7SEG+0x308>)
 8000522:	f001 fe68 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	4875      	ldr	r0, [pc, #468]	; (8000700 <display7SEG+0x308>)
 800052c:	f001 fe63 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 4){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d122      	bne.n	800057c <display7SEG+0x184>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2101      	movs	r1, #1
 800053a:	4871      	ldr	r0, [pc, #452]	; (8000700 <display7SEG+0x308>)
 800053c:	f001 fe5b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	486e      	ldr	r0, [pc, #440]	; (8000700 <display7SEG+0x308>)
 8000546:	f001 fe56 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	486c      	ldr	r0, [pc, #432]	; (8000700 <display7SEG+0x308>)
 8000550:	f001 fe51 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	4869      	ldr	r0, [pc, #420]	; (8000700 <display7SEG+0x308>)
 800055a:	f001 fe4c 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	4867      	ldr	r0, [pc, #412]	; (8000700 <display7SEG+0x308>)
 8000564:	f001 fe47 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4864      	ldr	r0, [pc, #400]	; (8000700 <display7SEG+0x308>)
 800056e:	f001 fe42 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4862      	ldr	r0, [pc, #392]	; (8000700 <display7SEG+0x308>)
 8000578:	f001 fe3d 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 5){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d122      	bne.n	80005c8 <display7SEG+0x1d0>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	485e      	ldr	r0, [pc, #376]	; (8000700 <display7SEG+0x308>)
 8000588:	f001 fe35 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	485b      	ldr	r0, [pc, #364]	; (8000700 <display7SEG+0x308>)
 8000592:	f001 fe30 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2104      	movs	r1, #4
 800059a:	4859      	ldr	r0, [pc, #356]	; (8000700 <display7SEG+0x308>)
 800059c:	f001 fe2b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	4856      	ldr	r0, [pc, #344]	; (8000700 <display7SEG+0x308>)
 80005a6:	f001 fe26 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	4854      	ldr	r0, [pc, #336]	; (8000700 <display7SEG+0x308>)
 80005b0:	f001 fe21 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4851      	ldr	r0, [pc, #324]	; (8000700 <display7SEG+0x308>)
 80005ba:	f001 fe1c 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	484f      	ldr	r0, [pc, #316]	; (8000700 <display7SEG+0x308>)
 80005c4:	f001 fe17 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 6){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b06      	cmp	r3, #6
 80005cc:	d122      	bne.n	8000614 <display7SEG+0x21c>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	484b      	ldr	r0, [pc, #300]	; (8000700 <display7SEG+0x308>)
 80005d4:	f001 fe0f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	4848      	ldr	r0, [pc, #288]	; (8000700 <display7SEG+0x308>)
 80005de:	f001 fe0a 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4846      	ldr	r0, [pc, #280]	; (8000700 <display7SEG+0x308>)
 80005e8:	f001 fe05 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2108      	movs	r1, #8
 80005f0:	4843      	ldr	r0, [pc, #268]	; (8000700 <display7SEG+0x308>)
 80005f2:	f001 fe00 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <display7SEG+0x308>)
 80005fc:	f001 fdfb 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2120      	movs	r1, #32
 8000604:	483e      	ldr	r0, [pc, #248]	; (8000700 <display7SEG+0x308>)
 8000606:	f001 fdf6 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	483c      	ldr	r0, [pc, #240]	; (8000700 <display7SEG+0x308>)
 8000610:	f001 fdf1 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d122      	bne.n	8000660 <display7SEG+0x268>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4838      	ldr	r0, [pc, #224]	; (8000700 <display7SEG+0x308>)
 8000620:	f001 fde9 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4835      	ldr	r0, [pc, #212]	; (8000700 <display7SEG+0x308>)
 800062a:	f001 fde4 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2104      	movs	r1, #4
 8000632:	4833      	ldr	r0, [pc, #204]	; (8000700 <display7SEG+0x308>)
 8000634:	f001 fddf 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	4830      	ldr	r0, [pc, #192]	; (8000700 <display7SEG+0x308>)
 800063e:	f001 fdda 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2110      	movs	r1, #16
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <display7SEG+0x308>)
 8000648:	f001 fdd5 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2120      	movs	r1, #32
 8000650:	482b      	ldr	r0, [pc, #172]	; (8000700 <display7SEG+0x308>)
 8000652:	f001 fdd0 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4829      	ldr	r0, [pc, #164]	; (8000700 <display7SEG+0x308>)
 800065c:	f001 fdcb 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 8){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b08      	cmp	r3, #8
 8000664:	d122      	bne.n	80006ac <display7SEG+0x2b4>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <display7SEG+0x308>)
 800066c:	f001 fdc3 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2102      	movs	r1, #2
 8000674:	4822      	ldr	r0, [pc, #136]	; (8000700 <display7SEG+0x308>)
 8000676:	f001 fdbe 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	4820      	ldr	r0, [pc, #128]	; (8000700 <display7SEG+0x308>)
 8000680:	f001 fdb9 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	481d      	ldr	r0, [pc, #116]	; (8000700 <display7SEG+0x308>)
 800068a:	f001 fdb4 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2110      	movs	r1, #16
 8000692:	481b      	ldr	r0, [pc, #108]	; (8000700 <display7SEG+0x308>)
 8000694:	f001 fdaf 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <display7SEG+0x308>)
 800069e:	f001 fdaa 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <display7SEG+0x308>)
 80006a8:	f001 fda5 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 9){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b09      	cmp	r3, #9
 80006b0:	d122      	bne.n	80006f8 <display7SEG+0x300>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <display7SEG+0x308>)
 80006b8:	f001 fd9d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <display7SEG+0x308>)
 80006c2:	f001 fd98 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <display7SEG+0x308>)
 80006cc:	f001 fd93 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <display7SEG+0x308>)
 80006d6:	f001 fd8e 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <display7SEG+0x308>)
 80006e0:	f001 fd89 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <display7SEG+0x308>)
 80006ea:	f001 fd84 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <display7SEG+0x308>)
 80006f4:	f001 fd7f 	bl	80021f6 <HAL_GPIO_WritePin>
	}
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010c00 	.word	0x40010c00

08000704 <display7SEG_2>:
void display7SEG_2(int num)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	if(num == 0){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d128      	bne.n	8000764 <display7SEG_2+0x60>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	48cf      	ldr	r0, [pc, #828]	; (8000a54 <display7SEG_2+0x350>)
 8000718:	f001 fd6d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	48cc      	ldr	r0, [pc, #816]	; (8000a54 <display7SEG_2+0x350>)
 8000724:	f001 fd67 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	48c9      	ldr	r0, [pc, #804]	; (8000a54 <display7SEG_2+0x350>)
 8000730:	f001 fd61 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	48c6      	ldr	r0, [pc, #792]	; (8000a54 <display7SEG_2+0x350>)
 800073c:	f001 fd5b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	48c3      	ldr	r0, [pc, #780]	; (8000a54 <display7SEG_2+0x350>)
 8000748:	f001 fd55 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	48c0      	ldr	r0, [pc, #768]	; (8000a54 <display7SEG_2+0x350>)
 8000754:	f001 fd4f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	48bd      	ldr	r0, [pc, #756]	; (8000a54 <display7SEG_2+0x350>)
 8000760:	f001 fd49 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 1){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d128      	bne.n	80007bc <display7SEG_2+0xb8>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	48b9      	ldr	r0, [pc, #740]	; (8000a54 <display7SEG_2+0x350>)
 8000770:	f001 fd41 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	48b6      	ldr	r0, [pc, #728]	; (8000a54 <display7SEG_2+0x350>)
 800077c:	f001 fd3b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	48b3      	ldr	r0, [pc, #716]	; (8000a54 <display7SEG_2+0x350>)
 8000788:	f001 fd35 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	48b0      	ldr	r0, [pc, #704]	; (8000a54 <display7SEG_2+0x350>)
 8000794:	f001 fd2f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	48ad      	ldr	r0, [pc, #692]	; (8000a54 <display7SEG_2+0x350>)
 80007a0:	f001 fd29 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007aa:	48aa      	ldr	r0, [pc, #680]	; (8000a54 <display7SEG_2+0x350>)
 80007ac:	f001 fd23 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b6:	48a7      	ldr	r0, [pc, #668]	; (8000a54 <display7SEG_2+0x350>)
 80007b8:	f001 fd1d 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 2){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d128      	bne.n	8000814 <display7SEG_2+0x110>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	48a3      	ldr	r0, [pc, #652]	; (8000a54 <display7SEG_2+0x350>)
 80007c8:	f001 fd15 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	48a0      	ldr	r0, [pc, #640]	; (8000a54 <display7SEG_2+0x350>)
 80007d4:	f001 fd0f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	489d      	ldr	r0, [pc, #628]	; (8000a54 <display7SEG_2+0x350>)
 80007e0:	f001 fd09 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	489a      	ldr	r0, [pc, #616]	; (8000a54 <display7SEG_2+0x350>)
 80007ec:	f001 fd03 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	4897      	ldr	r0, [pc, #604]	; (8000a54 <display7SEG_2+0x350>)
 80007f8:	f001 fcfd 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	4894      	ldr	r0, [pc, #592]	; (8000a54 <display7SEG_2+0x350>)
 8000804:	f001 fcf7 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4891      	ldr	r0, [pc, #580]	; (8000a54 <display7SEG_2+0x350>)
 8000810:	f001 fcf1 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 3){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d128      	bne.n	800086c <display7SEG_2+0x168>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	488d      	ldr	r0, [pc, #564]	; (8000a54 <display7SEG_2+0x350>)
 8000820:	f001 fce9 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	488a      	ldr	r0, [pc, #552]	; (8000a54 <display7SEG_2+0x350>)
 800082c:	f001 fce3 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4887      	ldr	r0, [pc, #540]	; (8000a54 <display7SEG_2+0x350>)
 8000838:	f001 fcdd 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	4884      	ldr	r0, [pc, #528]	; (8000a54 <display7SEG_2+0x350>)
 8000844:	f001 fcd7 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084e:	4881      	ldr	r0, [pc, #516]	; (8000a54 <display7SEG_2+0x350>)
 8000850:	f001 fcd1 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	487e      	ldr	r0, [pc, #504]	; (8000a54 <display7SEG_2+0x350>)
 800085c:	f001 fccb 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	487b      	ldr	r0, [pc, #492]	; (8000a54 <display7SEG_2+0x350>)
 8000868:	f001 fcc5 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 4){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d128      	bne.n	80008c4 <display7SEG_2+0x1c0>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	4877      	ldr	r0, [pc, #476]	; (8000a54 <display7SEG_2+0x350>)
 8000878:	f001 fcbd 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	4874      	ldr	r0, [pc, #464]	; (8000a54 <display7SEG_2+0x350>)
 8000884:	f001 fcb7 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088e:	4871      	ldr	r0, [pc, #452]	; (8000a54 <display7SEG_2+0x350>)
 8000890:	f001 fcb1 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	486e      	ldr	r0, [pc, #440]	; (8000a54 <display7SEG_2+0x350>)
 800089c:	f001 fcab 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	486b      	ldr	r0, [pc, #428]	; (8000a54 <display7SEG_2+0x350>)
 80008a8:	f001 fca5 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	4868      	ldr	r0, [pc, #416]	; (8000a54 <display7SEG_2+0x350>)
 80008b4:	f001 fc9f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	4865      	ldr	r0, [pc, #404]	; (8000a54 <display7SEG_2+0x350>)
 80008c0:	f001 fc99 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 5){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	d128      	bne.n	800091c <display7SEG_2+0x218>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4861      	ldr	r0, [pc, #388]	; (8000a54 <display7SEG_2+0x350>)
 80008d0:	f001 fc91 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	485e      	ldr	r0, [pc, #376]	; (8000a54 <display7SEG_2+0x350>)
 80008dc:	f001 fc8b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	485b      	ldr	r0, [pc, #364]	; (8000a54 <display7SEG_2+0x350>)
 80008e8:	f001 fc85 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	4858      	ldr	r0, [pc, #352]	; (8000a54 <display7SEG_2+0x350>)
 80008f4:	f001 fc7f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	4855      	ldr	r0, [pc, #340]	; (8000a54 <display7SEG_2+0x350>)
 8000900:	f001 fc79 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	4852      	ldr	r0, [pc, #328]	; (8000a54 <display7SEG_2+0x350>)
 800090c:	f001 fc73 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	484f      	ldr	r0, [pc, #316]	; (8000a54 <display7SEG_2+0x350>)
 8000918:	f001 fc6d 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 6){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d128      	bne.n	8000974 <display7SEG_2+0x270>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	484b      	ldr	r0, [pc, #300]	; (8000a54 <display7SEG_2+0x350>)
 8000928:	f001 fc65 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	4848      	ldr	r0, [pc, #288]	; (8000a54 <display7SEG_2+0x350>)
 8000934:	f001 fc5f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093e:	4845      	ldr	r0, [pc, #276]	; (8000a54 <display7SEG_2+0x350>)
 8000940:	f001 fc59 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094a:	4842      	ldr	r0, [pc, #264]	; (8000a54 <display7SEG_2+0x350>)
 800094c:	f001 fc53 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	483f      	ldr	r0, [pc, #252]	; (8000a54 <display7SEG_2+0x350>)
 8000958:	f001 fc4d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <display7SEG_2+0x350>)
 8000964:	f001 fc47 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	4839      	ldr	r0, [pc, #228]	; (8000a54 <display7SEG_2+0x350>)
 8000970:	f001 fc41 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b07      	cmp	r3, #7
 8000978:	d128      	bne.n	80009cc <display7SEG_2+0x2c8>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4835      	ldr	r0, [pc, #212]	; (8000a54 <display7SEG_2+0x350>)
 8000980:	f001 fc39 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	4832      	ldr	r0, [pc, #200]	; (8000a54 <display7SEG_2+0x350>)
 800098c:	f001 fc33 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	482f      	ldr	r0, [pc, #188]	; (8000a54 <display7SEG_2+0x350>)
 8000998:	f001 fc2d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a2:	482c      	ldr	r0, [pc, #176]	; (8000a54 <display7SEG_2+0x350>)
 80009a4:	f001 fc27 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ae:	4829      	ldr	r0, [pc, #164]	; (8000a54 <display7SEG_2+0x350>)
 80009b0:	f001 fc21 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ba:	4826      	ldr	r0, [pc, #152]	; (8000a54 <display7SEG_2+0x350>)
 80009bc:	f001 fc1b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <display7SEG_2+0x350>)
 80009c8:	f001 fc15 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 8){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d128      	bne.n	8000a24 <display7SEG_2+0x320>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	481f      	ldr	r0, [pc, #124]	; (8000a54 <display7SEG_2+0x350>)
 80009d8:	f001 fc0d 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	481c      	ldr	r0, [pc, #112]	; (8000a54 <display7SEG_2+0x350>)
 80009e4:	f001 fc07 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	4819      	ldr	r0, [pc, #100]	; (8000a54 <display7SEG_2+0x350>)
 80009f0:	f001 fc01 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4816      	ldr	r0, [pc, #88]	; (8000a54 <display7SEG_2+0x350>)
 80009fc:	f001 fbfb 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <display7SEG_2+0x350>)
 8000a08:	f001 fbf5 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <display7SEG_2+0x350>)
 8000a14:	f001 fbef 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <display7SEG_2+0x350>)
 8000a20:	f001 fbe9 	bl	80021f6 <HAL_GPIO_WritePin>
	}
	if(num == 9){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	d12b      	bne.n	8000a82 <display7SEG_2+0x37e>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	4809      	ldr	r0, [pc, #36]	; (8000a54 <display7SEG_2+0x350>)
 8000a30:	f001 fbe1 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <display7SEG_2+0x350>)
 8000a3c:	f001 fbdb 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <display7SEG_2+0x350>)
 8000a48:	f001 fbd5 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	e001      	b.n	8000a58 <display7SEG_2+0x354>
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <display7SEG_2+0x388>)
 8000a5a:	f001 fbcc 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <display7SEG_2+0x388>)
 8000a66:	f001 fbc6 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <display7SEG_2+0x388>)
 8000a72:	f001 fbc0 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <display7SEG_2+0x388>)
 8000a7e:	f001 fbba 	bl	80021f6 <HAL_GPIO_WritePin>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <update7SEG>:

void update7SEG ( int index ){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 switch ( index ) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <update7SEG+0x16>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d014      	beq.n	8000ace <update7SEG+0x3e>
	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
	 display7SEG(SEG_buffer[index]);
 break ;
 default :
 break ;
 8000aa4:	e027      	b.n	8000af6 <update7SEG+0x66>
	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <update7SEG+0x70>)
 8000aae:	f001 fba2 	bl	80021f6 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <update7SEG+0x70>)
 8000aba:	f001 fb9c 	bl	80021f6 <HAL_GPIO_WritePin>
	 display7SEG(SEG_buffer[index]);
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <update7SEG+0x74>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fc96 	bl	80003f8 <display7SEG>
 break ;
 8000acc:	e013      	b.n	8000af6 <update7SEG+0x66>
	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <update7SEG+0x70>)
 8000ad6:	f001 fb8e 	bl	80021f6 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <update7SEG+0x70>)
 8000ae2:	f001 fb88 	bl	80021f6 <HAL_GPIO_WritePin>
	 display7SEG(SEG_buffer[index]);
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <update7SEG+0x74>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fc82 	bl	80003f8 <display7SEG>
 break ;
 8000af4:	bf00      	nop
 }
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	20000038 	.word	0x20000038

08000b08 <update7SEG_2>:
void update7SEG_2 ( int index ){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 switch ( index ) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d003      	beq.n	8000b1e <update7SEG_2+0x16>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d014      	beq.n	8000b46 <update7SEG_2+0x3e>
	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
	 display7SEG_2(SEG_buffer[index]);
 break ;
 default :
 break ;
 8000b1c:	e027      	b.n	8000b6e <update7SEG_2+0x66>
	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <update7SEG_2+0x70>)
 8000b26:	f001 fb66 	bl	80021f6 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <update7SEG_2+0x70>)
 8000b32:	f001 fb60 	bl	80021f6 <HAL_GPIO_WritePin>
	 display7SEG_2(SEG_buffer[index]);
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <update7SEG_2+0x74>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fde0 	bl	8000704 <display7SEG_2>
 break ;
 8000b44:	e013      	b.n	8000b6e <update7SEG_2+0x66>
	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <update7SEG_2+0x70>)
 8000b4e:	f001 fb52 	bl	80021f6 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <update7SEG_2+0x70>)
 8000b5a:	f001 fb4c 	bl	80021f6 <HAL_GPIO_WritePin>
	 display7SEG_2(SEG_buffer[index]);
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <update7SEG_2+0x74>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fdcc 	bl	8000704 <display7SEG_2>
 break ;
 8000b6c:	bf00      	nop
 }
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	20000038 	.word	0x20000038

08000b80 <addTime>:
void addTime(int currValue){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	SEG_buffer[0] = currValue/10;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <addTime+0x40>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1092      	asrs	r2, r2, #2
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <addTime+0x44>)
 8000b98:	6013      	str	r3, [r2, #0]
	SEG_buffer[1] = currValue%10;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <addTime+0x40>)
 8000b9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba2:	109a      	asrs	r2, r3, #2
 8000ba4:	17cb      	asrs	r3, r1, #31
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	1aca      	subs	r2, r1, r3
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <addTime+0x44>)
 8000bb4:	605a      	str	r2, [r3, #4]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	66666667 	.word	0x66666667
 8000bc4:	20000038 	.word	0x20000038

08000bc8 <addTime_2>:
void addTime_2(int currValue2){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	SEG_buffer[2] = currValue2/10;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <addTime_2+0x40>)
 8000bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd8:	1092      	asrs	r2, r2, #2
 8000bda:	17db      	asrs	r3, r3, #31
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <addTime_2+0x44>)
 8000be0:	6093      	str	r3, [r2, #8]
	SEG_buffer[3] = currValue2%10;
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <addTime_2+0x40>)
 8000be6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bea:	109a      	asrs	r2, r3, #2
 8000bec:	17cb      	asrs	r3, r1, #31
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	1aca      	subs	r2, r1, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <addTime_2+0x44>)
 8000bfc:	60da      	str	r2, [r3, #12]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	66666667 	.word	0x66666667
 8000c0c:	20000038 	.word	0x20000038

08000c10 <fsm_automatic_run>:
#include "global.h"
#include "main.h"
#include "display_led.h"


void fsm_automatic_run(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	switch(status){
 8000c14:	4b82      	ldr	r3, [pc, #520]	; (8000e20 <fsm_automatic_run+0x210>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	f200 8188 	bhi.w	8000f30 <fsm_automatic_run+0x320>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <fsm_automatic_run+0x18>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c63 	.word	0x08000c63
 8000c30:	08000d41 	.word	0x08000d41
 8000c34:	08000e55 	.word	0x08000e55
	case INIT:
		status = AUTO_RED;
 8000c38:	4b79      	ldr	r3, [pc, #484]	; (8000e20 <fsm_automatic_run+0x210>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	601a      	str	r2, [r3, #0]
		setTimer1(initRED*100);
 8000c3e:	4b79      	ldr	r3, [pc, #484]	; (8000e24 <fsm_automatic_run+0x214>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2264      	movs	r2, #100	; 0x64
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fe03 	bl	8001854 <setTimer1>
		setTimer2(100);
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f000 fe1a 	bl	8001888 <setTimer2>
		setTimer4(50);
 8000c54:	2032      	movs	r0, #50	; 0x32
 8000c56:	f000 fe4b 	bl	80018f0 <setTimer4>
		index_led =0;
 8000c5a:	4b73      	ldr	r3, [pc, #460]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
		break;
 8000c60:	e16d      	b.n	8000f3e <fsm_automatic_run+0x32e>
	case AUTO_RED:
		if(time_red == 0) time_red = initRED;
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d103      	bne.n	8000c72 <fsm_automatic_run+0x62>
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <fsm_automatic_run+0x214>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6f      	ldr	r2, [pc, #444]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c70:	6013      	str	r3, [r2, #0]
		if(index_led > 1) index_led =0;
 8000c72:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	dd02      	ble.n	8000c80 <fsm_automatic_run+0x70>
 8000c7a:	4b6b      	ldr	r3, [pc, #428]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
		addTime(time_red);
 8000c80:	4b6a      	ldr	r3, [pc, #424]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff7b 	bl	8000b80 <addTime>
		update7SEG(index_led);
 8000c8a:	4b67      	ldr	r3, [pc, #412]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fefe 	bl	8000a90 <update7SEG>
		if(timer2_flag == 1){
 8000c94:	4b66      	ldr	r3, [pc, #408]	; (8000e30 <fsm_automatic_run+0x220>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d107      	bne.n	8000cac <fsm_automatic_run+0x9c>
			time_red--;
 8000c9c:	4b63      	ldr	r3, [pc, #396]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a62      	ldr	r2, [pc, #392]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000ca4:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f000 fdee 	bl	8001888 <setTimer2>
		}
		if(timer4_flag == 1)
 8000cac:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <fsm_automatic_run+0x224>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d107      	bne.n	8000cc4 <fsm_automatic_run+0xb4>
		{
			index_led++;
 8000cb4:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <fsm_automatic_run+0x218>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a5b      	ldr	r2, [pc, #364]	; (8000e28 <fsm_automatic_run+0x218>)
 8000cbc:	6013      	str	r3, [r2, #0]
			setTimer4(50);
 8000cbe:	2032      	movs	r0, #50	; 0x32
 8000cc0:	f000 fe16 	bl	80018f0 <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	485b      	ldr	r0, [pc, #364]	; (8000e38 <fsm_automatic_run+0x228>)
 8000cca:	f001 fa94 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	4859      	ldr	r0, [pc, #356]	; (8000e38 <fsm_automatic_run+0x228>)
 8000cd4:	f001 fa8f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cde:	4856      	ldr	r0, [pc, #344]	; (8000e38 <fsm_automatic_run+0x228>)
 8000ce0:	f001 fa89 	bl	80021f6 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000ce4:	4b55      	ldr	r3, [pc, #340]	; (8000e3c <fsm_automatic_run+0x22c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d116      	bne.n	8000d1a <fsm_automatic_run+0x10a>
			status = AUTO_GREEN;
 8000cec:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <fsm_automatic_run+0x210>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	601a      	str	r2, [r3, #0]
			setTimer1(initGREEN*100);
 8000cf2:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <fsm_automatic_run+0x230>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2264      	movs	r2, #100	; 0x64
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fda9 	bl	8001854 <setTimer1>
			time_green =0;
 8000d02:	4b50      	ldr	r3, [pc, #320]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f000 fdbd 	bl	8001888 <setTimer2>
			setTimer4(50);
 8000d0e:	2032      	movs	r0, #50	; 0x32
 8000d10:	f000 fdee 	bl	80018f0 <setTimer4>
			index_led =0;
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
		}
		if(is_Button1_Pressed() == 1)
 8000d1a:	f7ff fa17 	bl	800014c <is_Button1_Pressed>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	f040 8107 	bne.w	8000f34 <fsm_automatic_run+0x324>
		{
			status = MAN_RED;
 8000d26:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <fsm_automatic_run+0x210>)
 8000d28:	220a      	movs	r2, #10
 8000d2a:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000d2c:	2032      	movs	r0, #50	; 0x32
 8000d2e:	f000 fdab 	bl	8001888 <setTimer2>
			index_led =0;
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
			index_led2 =2;
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <fsm_automatic_run+0x238>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d3e:	e0f9      	b.n	8000f34 <fsm_automatic_run+0x324>
	case AUTO_GREEN:
		if(time_green == 0) time_green = initGREEN;
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <fsm_automatic_run+0x140>
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <fsm_automatic_run+0x230>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a3d      	ldr	r2, [pc, #244]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d4e:	6013      	str	r3, [r2, #0]
		if(index_led > 1) index_led =0;
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	dd02      	ble.n	8000d5e <fsm_automatic_run+0x14e>
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
		addTime(time_green);
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff0c 	bl	8000b80 <addTime>
		update7SEG(index_led);
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe8f 	bl	8000a90 <update7SEG>
		if(timer2_flag == 1){
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <fsm_automatic_run+0x220>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <fsm_automatic_run+0x17a>
			time_green--;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d82:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f000 fd7f 	bl	8001888 <setTimer2>
		}
		if(timer4_flag == 1)
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <fsm_automatic_run+0x224>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d107      	bne.n	8000da2 <fsm_automatic_run+0x192>
		{
			index_led++;
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d9a:	6013      	str	r3, [r2, #0]
			setTimer4(50);
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 fda7 	bl	80018f0 <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	4824      	ldr	r0, [pc, #144]	; (8000e38 <fsm_automatic_run+0x228>)
 8000da8:	f001 fa25 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4821      	ldr	r0, [pc, #132]	; (8000e38 <fsm_automatic_run+0x228>)
 8000db2:	f001 fa20 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	481e      	ldr	r0, [pc, #120]	; (8000e38 <fsm_automatic_run+0x228>)
 8000dbe:	f001 fa1a 	bl	80021f6 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <fsm_automatic_run+0x22c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d116      	bne.n	8000df8 <fsm_automatic_run+0x1e8>
			status = AUTO_YELLOW;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <fsm_automatic_run+0x210>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	601a      	str	r2, [r3, #0]
			time_yellow=0;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <fsm_automatic_run+0x23c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
			setTimer1(initYELLOW*100);
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <fsm_automatic_run+0x240>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2264      	movs	r2, #100	; 0x64
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fd37 	bl	8001854 <setTimer1>
			setTimer2(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 fd4e 	bl	8001888 <setTimer2>
			setTimer4(50);
 8000dec:	2032      	movs	r0, #50	; 0x32
 8000dee:	f000 fd7f 	bl	80018f0 <setTimer4>
			index_led = 0;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <fsm_automatic_run+0x218>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
		}
		if(is_Button1_Pressed() == 1)
 8000df8:	f7ff f9a8 	bl	800014c <is_Button1_Pressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	f040 809a 	bne.w	8000f38 <fsm_automatic_run+0x328>
		{
			status = MAN_RED;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <fsm_automatic_run+0x210>)
 8000e06:	220a      	movs	r2, #10
 8000e08:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f000 fd3c 	bl	8001888 <setTimer2>
			index_led =0;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <fsm_automatic_run+0x218>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
			index_led2 =2;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <fsm_automatic_run+0x238>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e1c:	e08c      	b.n	8000f38 <fsm_automatic_run+0x328>
 8000e1e:	bf00      	nop
 8000e20:	20000098 	.word	0x20000098
 8000e24:	20000048 	.word	0x20000048
 8000e28:	200000b8 	.word	0x200000b8
 8000e2c:	200000a0 	.word	0x200000a0
 8000e30:	20000120 	.word	0x20000120
 8000e34:	20000128 	.word	0x20000128
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	2000011c 	.word	0x2000011c
 8000e40:	2000004c 	.word	0x2000004c
 8000e44:	200000a4 	.word	0x200000a4
 8000e48:	20000034 	.word	0x20000034
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	20000050 	.word	0x20000050
	case AUTO_YELLOW:
		if(time_yellow == 0) time_yellow = initYELLOW;
 8000e54:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <fsm_automatic_run+0x254>
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <fsm_automatic_run+0x338>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a38      	ldr	r2, [pc, #224]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e62:	6013      	str	r3, [r2, #0]
		if(index_led > 1) index_led =0;
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	dd02      	ble.n	8000e72 <fsm_automatic_run+0x262>
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
		addTime(time_yellow);
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe82 	bl	8000b80 <addTime>
		update7SEG(index_led);
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe05 	bl	8000a90 <update7SEG>
		if(timer2_flag == 1){
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <fsm_automatic_run+0x340>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d107      	bne.n	8000e9e <fsm_automatic_run+0x28e>
			time_yellow--;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e96:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f000 fcf5 	bl	8001888 <setTimer2>
		}
		if(timer4_flag == 1)
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <fsm_automatic_run+0x344>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d107      	bne.n	8000eb6 <fsm_automatic_run+0x2a6>
		{
			index_led++;
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000eae:	6013      	str	r3, [r2, #0]
			setTimer4(50);
 8000eb0:	2032      	movs	r0, #50	; 0x32
 8000eb2:	f000 fd1d 	bl	80018f0 <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	4827      	ldr	r0, [pc, #156]	; (8000f58 <fsm_automatic_run+0x348>)
 8000ebc:	f001 f99b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4824      	ldr	r0, [pc, #144]	; (8000f58 <fsm_automatic_run+0x348>)
 8000ec6:	f001 f996 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4821      	ldr	r0, [pc, #132]	; (8000f58 <fsm_automatic_run+0x348>)
 8000ed2:	f001 f990 	bl	80021f6 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <fsm_automatic_run+0x34c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d116      	bne.n	8000f0c <fsm_automatic_run+0x2fc>
			status = AUTO_RED;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <fsm_automatic_run+0x350>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	601a      	str	r2, [r3, #0]
			time_red=0;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <fsm_automatic_run+0x354>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			setTimer1(initRED*100);
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <fsm_automatic_run+0x358>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2264      	movs	r2, #100	; 0x64
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fcad 	bl	8001854 <setTimer1>
			setTimer2(100);
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f000 fcc4 	bl	8001888 <setTimer2>
			setTimer4(50);
 8000f00:	2032      	movs	r0, #50	; 0x32
 8000f02:	f000 fcf5 	bl	80018f0 <setTimer4>
			index_led = 0;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
		}
		if(is_Button1_Pressed() == 1)
 8000f0c:	f7ff f91e 	bl	800014c <is_Button1_Pressed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d112      	bne.n	8000f3c <fsm_automatic_run+0x32c>
		{
			status = MAN_RED;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <fsm_automatic_run+0x350>)
 8000f18:	220a      	movs	r2, #10
 8000f1a:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000f1c:	2032      	movs	r0, #50	; 0x32
 8000f1e:	f000 fcb3 	bl	8001888 <setTimer2>
			index_led =0;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			index_led2 =2;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <fsm_automatic_run+0x35c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f2e:	e005      	b.n	8000f3c <fsm_automatic_run+0x32c>
	default:
		break;
 8000f30:	bf00      	nop
 8000f32:	e004      	b.n	8000f3e <fsm_automatic_run+0x32e>
		break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <fsm_automatic_run+0x32e>
		break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <fsm_automatic_run+0x32e>
		break;
 8000f3c:	bf00      	nop
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000a8 	.word	0x200000a8
 8000f48:	20000050 	.word	0x20000050
 8000f4c:	200000b8 	.word	0x200000b8
 8000f50:	20000120 	.word	0x20000120
 8000f54:	20000128 	.word	0x20000128
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	2000011c 	.word	0x2000011c
 8000f60:	20000098 	.word	0x20000098
 8000f64:	200000a0 	.word	0x200000a0
 8000f68:	20000048 	.word	0x20000048
 8000f6c:	20000034 	.word	0x20000034

08000f70 <fsm_automatic_2_run>:
//---fsm_automatic_2-------
void fsm_automatic_2_run(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	switch(status_2){
 8000f74:	4ba6      	ldr	r3, [pc, #664]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	f200 8146 	bhi.w	800120c <fsm_automatic_2_run+0x29c>
 8000f80:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <fsm_automatic_2_run+0x18>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000f99 	.word	0x08000f99
 8000f8c:	08000fc9 	.word	0x08000fc9
 8000f90:	0800108b 	.word	0x0800108b
 8000f94:	0800114d 	.word	0x0800114d
	case INIT:
		status_2 = AUTO_GREEN;
 8000f98:	4b9d      	ldr	r3, [pc, #628]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	601a      	str	r2, [r3, #0]
		setTimer3(initGREEN*100);
 8000f9e:	4b9d      	ldr	r3, [pc, #628]	; (8001214 <fsm_automatic_2_run+0x2a4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fc87 	bl	80018bc <setTimer3>
		setTimer5(100);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f000 fcb8 	bl	8001924 <setTimer5>
		setTimer6(50);
 8000fb4:	2032      	movs	r0, #50	; 0x32
 8000fb6:	f000 fccf 	bl	8001958 <setTimer6>
		index_led2 =2;
 8000fba:	4b97      	ldr	r3, [pc, #604]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	601a      	str	r2, [r3, #0]
		time_green2 =0;
 8000fc0:	4b96      	ldr	r3, [pc, #600]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		break;
 8000fc6:	e144      	b.n	8001252 <fsm_automatic_2_run+0x2e2>
	case AUTO_RED:
		if(index_led2 >3 ) index_led2 = 2;
 8000fc8:	4b93      	ldr	r3, [pc, #588]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	dd02      	ble.n	8000fd6 <fsm_automatic_2_run+0x66>
 8000fd0:	4b91      	ldr	r3, [pc, #580]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	601a      	str	r2, [r3, #0]
		if(time_red2 == 0) time_red2 = initRED2;
 8000fd6:	4b92      	ldr	r3, [pc, #584]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <fsm_automatic_2_run+0x76>
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a8f      	ldr	r2, [pc, #572]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 8000fe4:	6013      	str	r3, [r2, #0]
		addTime_2(time_red2);
 8000fe6:	4b8e      	ldr	r3, [pc, #568]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fdec 	bl	8000bc8 <addTime_2>
		update7SEG_2(index_led2);
 8000ff0:	4b89      	ldr	r3, [pc, #548]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fd87 	bl	8000b08 <update7SEG_2>
		if(timer5_flag == 1){
 8000ffa:	4b8b      	ldr	r3, [pc, #556]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <fsm_automatic_2_run+0xa2>
			time_red2--;
 8001002:	4b87      	ldr	r3, [pc, #540]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a85      	ldr	r2, [pc, #532]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 800100a:	6013      	str	r3, [r2, #0]
			setTimer5(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f000 fc89 	bl	8001924 <setTimer5>
		}
		if(timer6_flag == 1)
 8001012:	4b86      	ldr	r3, [pc, #536]	; (800122c <fsm_automatic_2_run+0x2bc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <fsm_automatic_2_run+0xba>
		{
			index_led2++;
 800101a:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a7d      	ldr	r2, [pc, #500]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8001022:	6013      	str	r3, [r2, #0]
			setTimer6(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f000 fc97 	bl	8001958 <setTimer6>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2104      	movs	r1, #4
 800102e:	4880      	ldr	r0, [pc, #512]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 8001030:	f001 f8e1 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	487d      	ldr	r0, [pc, #500]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 800103a:	f001 f8dc 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2110      	movs	r1, #16
 8001042:	487b      	ldr	r0, [pc, #492]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 8001044:	f001 f8d7 	bl	80021f6 <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 8001048:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <fsm_automatic_2_run+0x2c4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d113      	bne.n	8001078 <fsm_automatic_2_run+0x108>
			status_2 = AUTO_GREEN;
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8001052:	2203      	movs	r2, #3
 8001054:	601a      	str	r2, [r3, #0]
			setTimer3(initGREEN2*100);
 8001056:	4b78      	ldr	r3, [pc, #480]	; (8001238 <fsm_automatic_2_run+0x2c8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2264      	movs	r2, #100	; 0x64
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fc2b 	bl	80018bc <setTimer3>
			setTimer5(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f000 fc5c 	bl	8001924 <setTimer5>
			setTimer6(50);
 800106c:	2032      	movs	r0, #50	; 0x32
 800106e:	f000 fc73 	bl	8001958 <setTimer6>
			time_green2 =0;
 8001072:	4b6a      	ldr	r3, [pc, #424]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
		}
		if(status == MAN_RED)
 8001078:	4b70      	ldr	r3, [pc, #448]	; (800123c <fsm_automatic_2_run+0x2cc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b0a      	cmp	r3, #10
 800107e:	f040 80e3 	bne.w	8001248 <fsm_automatic_2_run+0x2d8>
		{
			status_2 = 100;
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8001084:	2264      	movs	r2, #100	; 0x64
 8001086:	601a      	str	r2, [r3, #0]
		}
		break;
 8001088:	e0de      	b.n	8001248 <fsm_automatic_2_run+0x2d8>
	case AUTO_GREEN:
		if(index_led2 >3 ) index_led2 = 2;
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b03      	cmp	r3, #3
 8001090:	dd02      	ble.n	8001098 <fsm_automatic_2_run+0x128>
 8001092:	4b61      	ldr	r3, [pc, #388]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
		if(time_green2 == 0) time_green2 = initGREEN2;
 8001098:	4b60      	ldr	r3, [pc, #384]	; (800121c <fsm_automatic_2_run+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <fsm_automatic_2_run+0x138>
 80010a0:	4b65      	ldr	r3, [pc, #404]	; (8001238 <fsm_automatic_2_run+0x2c8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <fsm_automatic_2_run+0x2ac>)
 80010a6:	6013      	str	r3, [r2, #0]
		addTime_2(time_green2);
 80010a8:	4b5c      	ldr	r3, [pc, #368]	; (800121c <fsm_automatic_2_run+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd8b 	bl	8000bc8 <addTime_2>
		update7SEG_2(index_led2);
 80010b2:	4b59      	ldr	r3, [pc, #356]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fd26 	bl	8000b08 <update7SEG_2>
		if(timer5_flag == 1){
 80010bc:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <fsm_automatic_2_run+0x164>
			time_green2--;
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <fsm_automatic_2_run+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a54      	ldr	r2, [pc, #336]	; (800121c <fsm_automatic_2_run+0x2ac>)
 80010cc:	6013      	str	r3, [r2, #0]
			setTimer5(100);
 80010ce:	2064      	movs	r0, #100	; 0x64
 80010d0:	f000 fc28 	bl	8001924 <setTimer5>
		}
		if(timer6_flag == 1)
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <fsm_automatic_2_run+0x2bc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d107      	bne.n	80010ec <fsm_automatic_2_run+0x17c>
		{
			index_led2++;
 80010dc:	4b4e      	ldr	r3, [pc, #312]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 80010e4:	6013      	str	r3, [r2, #0]
			setTimer6(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f000 fc36 	bl	8001958 <setTimer6>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2104      	movs	r1, #4
 80010f0:	484f      	ldr	r0, [pc, #316]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 80010f2:	f001 f880 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	484d      	ldr	r0, [pc, #308]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 80010fc:	f001 f87b 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2110      	movs	r1, #16
 8001104:	484a      	ldr	r0, [pc, #296]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 8001106:	f001 f876 	bl	80021f6 <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <fsm_automatic_2_run+0x2c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d113      	bne.n	800113a <fsm_automatic_2_run+0x1ca>
			status_2 = AUTO_YELLOW;
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8001114:	2204      	movs	r2, #4
 8001116:	601a      	str	r2, [r3, #0]
			time_yellow2=0;
 8001118:	4b49      	ldr	r3, [pc, #292]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
			setTimer3(initYELLOW2*100);
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <fsm_automatic_2_run+0x2d4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2264      	movs	r2, #100	; 0x64
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fbc7 	bl	80018bc <setTimer3>
			setTimer5(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f000 fbf8 	bl	8001924 <setTimer5>
			setTimer6(50);
 8001134:	2032      	movs	r0, #50	; 0x32
 8001136:	f000 fc0f 	bl	8001958 <setTimer6>
		}
		if(status == MAN_RED)
 800113a:	4b40      	ldr	r3, [pc, #256]	; (800123c <fsm_automatic_2_run+0x2cc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	f040 8084 	bne.w	800124c <fsm_automatic_2_run+0x2dc>
		{
			status_2 = 100;
 8001144:	4b32      	ldr	r3, [pc, #200]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8001146:	2264      	movs	r2, #100	; 0x64
 8001148:	601a      	str	r2, [r3, #0]

		}
		break;
 800114a:	e07f      	b.n	800124c <fsm_automatic_2_run+0x2dc>
	case AUTO_YELLOW:
		if(index_led2 >3 ) index_led2 = 2;
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b03      	cmp	r3, #3
 8001152:	dd02      	ble.n	800115a <fsm_automatic_2_run+0x1ea>
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8001156:	2202      	movs	r2, #2
 8001158:	601a      	str	r2, [r3, #0]
		if(time_yellow2 == 0) time_yellow2 = initYELLOW2;
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <fsm_automatic_2_run+0x1fa>
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <fsm_automatic_2_run+0x2d4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a36      	ldr	r2, [pc, #216]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 8001168:	6013      	str	r3, [r2, #0]
		addTime_2(time_yellow2);
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fd2a 	bl	8000bc8 <addTime_2>
		update7SEG_2(index_led2);
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fcc5 	bl	8000b08 <update7SEG_2>
		if(timer5_flag == 1){
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <fsm_automatic_2_run+0x226>
			time_yellow2--;
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3b01      	subs	r3, #1
 800118c:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 800118e:	6013      	str	r3, [r2, #0]
			setTimer5(100);
 8001190:	2064      	movs	r0, #100	; 0x64
 8001192:	f000 fbc7 	bl	8001924 <setTimer5>
		}
		if(timer6_flag == 1)
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <fsm_automatic_2_run+0x2bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d107      	bne.n	80011ae <fsm_automatic_2_run+0x23e>
		{
			index_led2++;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <fsm_automatic_2_run+0x2a8>)
 80011a6:	6013      	str	r3, [r2, #0]
			setTimer6(50);
 80011a8:	2032      	movs	r0, #50	; 0x32
 80011aa:	f000 fbd5 	bl	8001958 <setTimer6>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2104      	movs	r1, #4
 80011b2:	481f      	ldr	r0, [pc, #124]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 80011b4:	f001 f81f 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2108      	movs	r1, #8
 80011bc:	481c      	ldr	r0, [pc, #112]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 80011be:	f001 f81a 	bl	80021f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2110      	movs	r1, #16
 80011c6:	481a      	ldr	r0, [pc, #104]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 80011c8:	f001 f815 	bl	80021f6 <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <fsm_automatic_2_run+0x2c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d113      	bne.n	80011fc <fsm_automatic_2_run+0x28c>
			status_2 = AUTO_RED;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	601a      	str	r2, [r3, #0]
			time_red2=0;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
			setTimer3(initRED2*100);
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2264      	movs	r2, #100	; 0x64
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fb66 	bl	80018bc <setTimer3>
			setTimer5(100);
 80011f0:	2064      	movs	r0, #100	; 0x64
 80011f2:	f000 fb97 	bl	8001924 <setTimer5>
			setTimer6(50);
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f000 fbae 	bl	8001958 <setTimer6>
		}
		if(status_2 == MAN_RED)
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b0a      	cmp	r3, #10
 8001202:	d125      	bne.n	8001250 <fsm_automatic_2_run+0x2e0>
		{
			status_2 = 100;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <fsm_automatic_2_run+0x2a0>)
 8001206:	2264      	movs	r2, #100	; 0x64
 8001208:	601a      	str	r2, [r3, #0]
		}
		break;
 800120a:	e021      	b.n	8001250 <fsm_automatic_2_run+0x2e0>
	default:
		break;
 800120c:	bf00      	nop
 800120e:	e020      	b.n	8001252 <fsm_automatic_2_run+0x2e2>
 8001210:	2000009c 	.word	0x2000009c
 8001214:	2000004c 	.word	0x2000004c
 8001218:	20000034 	.word	0x20000034
 800121c:	200000b0 	.word	0x200000b0
 8001220:	200000ac 	.word	0x200000ac
 8001224:	20000054 	.word	0x20000054
 8001228:	2000012c 	.word	0x2000012c
 800122c:	20000130 	.word	0x20000130
 8001230:	40010800 	.word	0x40010800
 8001234:	20000124 	.word	0x20000124
 8001238:	20000058 	.word	0x20000058
 800123c:	20000098 	.word	0x20000098
 8001240:	200000b4 	.word	0x200000b4
 8001244:	2000005c 	.word	0x2000005c
		break;
 8001248:	bf00      	nop
 800124a:	e002      	b.n	8001252 <fsm_automatic_2_run+0x2e2>
		break;
 800124c:	bf00      	nop
 800124e:	e000      	b.n	8001252 <fsm_automatic_2_run+0x2e2>
		break;
 8001250:	bf00      	nop
	}
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop

08001258 <fsm_manual_run>:

#include "fsm_manual.h"
#include "display_led.h"
#include "main.h"

void fsm_manual_run(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	switch(status){
 800125c:	4b89      	ldr	r3, [pc, #548]	; (8001484 <fsm_manual_run+0x22c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b0c      	cmp	r3, #12
 8001262:	f000 8127 	beq.w	80014b4 <fsm_manual_run+0x25c>
 8001266:	2b0c      	cmp	r3, #12
 8001268:	f300 81a3 	bgt.w	80015b2 <fsm_manual_run+0x35a>
 800126c:	2b0a      	cmp	r3, #10
 800126e:	d003      	beq.n	8001278 <fsm_manual_run+0x20>
 8001270:	2b0b      	cmp	r3, #11
 8001272:	f000 8084 	beq.w	800137e <fsm_manual_run+0x126>
				setTimer1(initRED*100-100);
				setTimer3(initGREEN2*100-100);
			}
			break;
		default:
			break;
 8001276:	e19c      	b.n	80015b2 <fsm_manual_run+0x35a>
			if(index_led > 1) index_led = 0;
 8001278:	4b83      	ldr	r3, [pc, #524]	; (8001488 <fsm_manual_run+0x230>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	dd02      	ble.n	8001286 <fsm_manual_run+0x2e>
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <fsm_manual_run+0x230>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
			if(index_led2 > 3) index_led2 = 2;
 8001286:	4b81      	ldr	r3, [pc, #516]	; (800148c <fsm_manual_run+0x234>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b03      	cmp	r3, #3
 800128c:	dd02      	ble.n	8001294 <fsm_manual_run+0x3c>
 800128e:	4b7f      	ldr	r3, [pc, #508]	; (800148c <fsm_manual_run+0x234>)
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
			addTime(initRED);
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <fsm_manual_run+0x238>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fc71 	bl	8000b80 <addTime>
			addTime_2(2);
 800129e:	2002      	movs	r0, #2
 80012a0:	f7ff fc92 	bl	8000bc8 <addTime_2>
			update7SEG_2(index_led2);
 80012a4:	4b79      	ldr	r3, [pc, #484]	; (800148c <fsm_manual_run+0x234>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fc2d 	bl	8000b08 <update7SEG_2>
			update7SEG(index_led);
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <fsm_manual_run+0x230>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fbec 	bl	8000a90 <update7SEG>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	4875      	ldr	r0, [pc, #468]	; (8001494 <fsm_manual_run+0x23c>)
 80012be:	f000 ff9a 	bl	80021f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c8:	4872      	ldr	r0, [pc, #456]	; (8001494 <fsm_manual_run+0x23c>)
 80012ca:	f000 ff94 	bl	80021f6 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <fsm_manual_run+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d114      	bne.n	8001300 <fsm_manual_run+0xa8>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	486e      	ldr	r0, [pc, #440]	; (8001494 <fsm_manual_run+0x23c>)
 80012da:	f000 ffa4 	bl	8002226 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 80012de:	2104      	movs	r1, #4
 80012e0:	486c      	ldr	r0, [pc, #432]	; (8001494 <fsm_manual_run+0x23c>)
 80012e2:	f000 ffa0 	bl	8002226 <HAL_GPIO_TogglePin>
				index_led++;
 80012e6:	4b68      	ldr	r3, [pc, #416]	; (8001488 <fsm_manual_run+0x230>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a66      	ldr	r2, [pc, #408]	; (8001488 <fsm_manual_run+0x230>)
 80012ee:	6013      	str	r3, [r2, #0]
				index_led2++;
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <fsm_manual_run+0x234>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a65      	ldr	r2, [pc, #404]	; (800148c <fsm_manual_run+0x234>)
 80012f8:	6013      	str	r3, [r2, #0]
				setTimer2(50);
 80012fa:	2032      	movs	r0, #50	; 0x32
 80012fc:	f000 fac4 	bl	8001888 <setTimer2>
			if(is_Button1_Pressed() == 1)
 8001300:	f7fe ff24 	bl	800014c <is_Button1_Pressed>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d105      	bne.n	8001316 <fsm_manual_run+0xbe>
				status = MAN_GREEN;
 800130a:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <fsm_manual_run+0x22c>)
 800130c:	220b      	movs	r2, #11
 800130e:	601a      	str	r2, [r3, #0]
				setTimer2(50);
 8001310:	2032      	movs	r0, #50	; 0x32
 8001312:	f000 fab9 	bl	8001888 <setTimer2>
			if(is_Button2_Pressed() == 1)
 8001316:	f7fe ff2b 	bl	8000170 <is_Button2_Pressed>
 800131a:	4603      	mov	r3, r0
 800131c:	2b01      	cmp	r3, #1
 800131e:	d109      	bne.n	8001334 <fsm_manual_run+0xdc>
				initRED++;
 8001320:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <fsm_manual_run+0x238>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a5a      	ldr	r2, [pc, #360]	; (8001490 <fsm_manual_run+0x238>)
 8001328:	6013      	str	r3, [r2, #0]
				initRED2++;
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <fsm_manual_run+0x244>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a5a      	ldr	r2, [pc, #360]	; (800149c <fsm_manual_run+0x244>)
 8001332:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 8001334:	f7fe ff2e 	bl	8000194 <is_Button3_Pressed>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	f040 813b 	bne.w	80015b6 <fsm_manual_run+0x35e>
				status = AUTO_RED;
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <fsm_manual_run+0x22c>)
 8001342:	2202      	movs	r2, #2
 8001344:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <fsm_manual_run+0x248>)
 8001348:	2203      	movs	r2, #3
 800134a:	601a      	str	r2, [r3, #0]
				time_red = 0;
 800134c:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <fsm_manual_run+0x24c>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
				time_green2 = 0;
 8001352:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <fsm_manual_run+0x250>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
				setTimer1(initRED*100-100);
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <fsm_manual_run+0x238>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	2264      	movs	r2, #100	; 0x64
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fa75 	bl	8001854 <setTimer1>
				setTimer3(initGREEN2*100-100);
 800136a:	4b50      	ldr	r3, [pc, #320]	; (80014ac <fsm_manual_run+0x254>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3b01      	subs	r3, #1
 8001370:	2264      	movs	r2, #100	; 0x64
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 faa0 	bl	80018bc <setTimer3>
			break;
 800137c:	e11b      	b.n	80015b6 <fsm_manual_run+0x35e>
			if(index_led > 1) index_led = 0;
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <fsm_manual_run+0x230>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	dd02      	ble.n	800138c <fsm_manual_run+0x134>
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <fsm_manual_run+0x230>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
			if(index_led2 > 3) index_led2 = 2;
 800138c:	4b3f      	ldr	r3, [pc, #252]	; (800148c <fsm_manual_run+0x234>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	dd02      	ble.n	800139a <fsm_manual_run+0x142>
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <fsm_manual_run+0x234>)
 8001396:	2202      	movs	r2, #2
 8001398:	601a      	str	r2, [r3, #0]
			addTime(initGREEN);
 800139a:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <fsm_manual_run+0x258>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fbee 	bl	8000b80 <addTime>
			addTime_2(3);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f7ff fc0f 	bl	8000bc8 <addTime_2>
			update7SEG_2(index_led2);
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <fsm_manual_run+0x234>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fbaa 	bl	8000b08 <update7SEG_2>
			update7SEG(index_led);
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <fsm_manual_run+0x230>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fb69 	bl	8000a90 <update7SEG>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2140      	movs	r1, #64	; 0x40
 80013c2:	4834      	ldr	r0, [pc, #208]	; (8001494 <fsm_manual_run+0x23c>)
 80013c4:	f000 ff17 	bl	80021f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ce:	4831      	ldr	r0, [pc, #196]	; (8001494 <fsm_manual_run+0x23c>)
 80013d0:	f000 ff11 	bl	80021f6 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <fsm_manual_run+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d114      	bne.n	8001406 <fsm_manual_run+0x1ae>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	482d      	ldr	r0, [pc, #180]	; (8001494 <fsm_manual_run+0x23c>)
 80013e0:	f000 ff21 	bl	8002226 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80013e4:	2108      	movs	r1, #8
 80013e6:	482b      	ldr	r0, [pc, #172]	; (8001494 <fsm_manual_run+0x23c>)
 80013e8:	f000 ff1d 	bl	8002226 <HAL_GPIO_TogglePin>
				index_led++;
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <fsm_manual_run+0x230>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a25      	ldr	r2, [pc, #148]	; (8001488 <fsm_manual_run+0x230>)
 80013f4:	6013      	str	r3, [r2, #0]
				index_led2++;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <fsm_manual_run+0x234>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <fsm_manual_run+0x234>)
 80013fe:	6013      	str	r3, [r2, #0]
				setTimer2(50);
 8001400:	2032      	movs	r0, #50	; 0x32
 8001402:	f000 fa41 	bl	8001888 <setTimer2>
			if(is_Button1_Pressed() == 1)
 8001406:	f7fe fea1 	bl	800014c <is_Button1_Pressed>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <fsm_manual_run+0x1c4>
				status = MAN_YELLOW;
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <fsm_manual_run+0x22c>)
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
				setTimer2(50);
 8001416:	2032      	movs	r0, #50	; 0x32
 8001418:	f000 fa36 	bl	8001888 <setTimer2>
			if(is_Button2_Pressed() == 1)
 800141c:	f7fe fea8 	bl	8000170 <is_Button2_Pressed>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d109      	bne.n	800143a <fsm_manual_run+0x1e2>
				initGREEN++;
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <fsm_manual_run+0x258>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <fsm_manual_run+0x258>)
 800142e:	6013      	str	r3, [r2, #0]
				initGREEN2++;
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <fsm_manual_run+0x254>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <fsm_manual_run+0x254>)
 8001438:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 800143a:	f7fe feab 	bl	8000194 <is_Button3_Pressed>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	f040 80ba 	bne.w	80015ba <fsm_manual_run+0x362>
				status = AUTO_RED;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <fsm_manual_run+0x22c>)
 8001448:	2202      	movs	r2, #2
 800144a:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <fsm_manual_run+0x248>)
 800144e:	2203      	movs	r2, #3
 8001450:	601a      	str	r2, [r3, #0]
				time_red = 0;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <fsm_manual_run+0x24c>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
				time_green2 = 0;
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <fsm_manual_run+0x250>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
				setTimer1(initRED*100-100);
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <fsm_manual_run+0x238>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	2264      	movs	r2, #100	; 0x64
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f9f2 	bl	8001854 <setTimer1>
				setTimer3(initGREEN2*100-100);
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <fsm_manual_run+0x254>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3b01      	subs	r3, #1
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fa1d 	bl	80018bc <setTimer3>
			break;
 8001482:	e09a      	b.n	80015ba <fsm_manual_run+0x362>
 8001484:	20000098 	.word	0x20000098
 8001488:	200000b8 	.word	0x200000b8
 800148c:	20000034 	.word	0x20000034
 8001490:	20000048 	.word	0x20000048
 8001494:	40010800 	.word	0x40010800
 8001498:	20000120 	.word	0x20000120
 800149c:	20000054 	.word	0x20000054
 80014a0:	2000009c 	.word	0x2000009c
 80014a4:	200000a0 	.word	0x200000a0
 80014a8:	200000b0 	.word	0x200000b0
 80014ac:	20000058 	.word	0x20000058
 80014b0:	2000004c 	.word	0x2000004c
			if(index_led > 1) index_led = 0;
 80014b4:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <fsm_manual_run+0x36c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	dd02      	ble.n	80014c2 <fsm_manual_run+0x26a>
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <fsm_manual_run+0x36c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			if(index_led2 > 3) index_led2 = 2;
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <fsm_manual_run+0x370>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	dd02      	ble.n	80014d0 <fsm_manual_run+0x278>
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <fsm_manual_run+0x370>)
 80014cc:	2202      	movs	r2, #2
 80014ce:	601a      	str	r2, [r3, #0]
			addTime(initYELLOW);
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <fsm_manual_run+0x374>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb53 	bl	8000b80 <addTime>
			addTime_2(4);
 80014da:	2004      	movs	r0, #4
 80014dc:	f7ff fb74 	bl	8000bc8 <addTime_2>
			update7SEG_2(index_led2);
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <fsm_manual_run+0x370>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb0f 	bl	8000b08 <update7SEG_2>
			update7SEG(index_led);
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <fsm_manual_run+0x36c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff face 	bl	8000a90 <update7SEG>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	4835      	ldr	r0, [pc, #212]	; (80015d0 <fsm_manual_run+0x378>)
 80014fa:	f000 fe7c 	bl	80021f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	4833      	ldr	r0, [pc, #204]	; (80015d0 <fsm_manual_run+0x378>)
 8001504:	f000 fe77 	bl	80021f6 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <fsm_manual_run+0x37c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d115      	bne.n	800153c <fsm_manual_run+0x2e4>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	482e      	ldr	r0, [pc, #184]	; (80015d0 <fsm_manual_run+0x378>)
 8001516:	f000 fe86 	bl	8002226 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 800151a:	2110      	movs	r1, #16
 800151c:	482c      	ldr	r0, [pc, #176]	; (80015d0 <fsm_manual_run+0x378>)
 800151e:	f000 fe82 	bl	8002226 <HAL_GPIO_TogglePin>
				index_led++;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <fsm_manual_run+0x36c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <fsm_manual_run+0x36c>)
 800152a:	6013      	str	r3, [r2, #0]
				index_led2++;
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <fsm_manual_run+0x370>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <fsm_manual_run+0x370>)
 8001534:	6013      	str	r3, [r2, #0]
				setTimer2(50);
 8001536:	2032      	movs	r0, #50	; 0x32
 8001538:	f000 f9a6 	bl	8001888 <setTimer2>
			if(is_Button1_Pressed() == 1)
 800153c:	f7fe fe06 	bl	800014c <is_Button1_Pressed>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <fsm_manual_run+0x2f4>
				status = MAN_RED;
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <fsm_manual_run+0x380>)
 8001548:	220a      	movs	r2, #10
 800154a:	601a      	str	r2, [r3, #0]
			if(is_Button2_Pressed() == 1)
 800154c:	f7fe fe10 	bl	8000170 <is_Button2_Pressed>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d109      	bne.n	800156a <fsm_manual_run+0x312>
				initYELLOW++;
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <fsm_manual_run+0x374>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <fsm_manual_run+0x374>)
 800155e:	6013      	str	r3, [r2, #0]
				initYELLOW2++;
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <fsm_manual_run+0x384>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <fsm_manual_run+0x384>)
 8001568:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 800156a:	f7fe fe13 	bl	8000194 <is_Button3_Pressed>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d124      	bne.n	80015be <fsm_manual_run+0x366>
				status = AUTO_RED;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <fsm_manual_run+0x380>)
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <fsm_manual_run+0x388>)
 800157c:	2203      	movs	r2, #3
 800157e:	601a      	str	r2, [r3, #0]
				time_red = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <fsm_manual_run+0x38c>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
				time_green2 = 0;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <fsm_manual_run+0x390>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
				setTimer1(initRED*100-100);
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <fsm_manual_run+0x394>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	2264      	movs	r2, #100	; 0x64
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f95b 	bl	8001854 <setTimer1>
				setTimer3(initGREEN2*100-100);
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <fsm_manual_run+0x398>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	2264      	movs	r2, #100	; 0x64
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f986 	bl	80018bc <setTimer3>
			break;
 80015b0:	e005      	b.n	80015be <fsm_manual_run+0x366>
			break;
 80015b2:	bf00      	nop
 80015b4:	e004      	b.n	80015c0 <fsm_manual_run+0x368>
			break;
 80015b6:	bf00      	nop
 80015b8:	e002      	b.n	80015c0 <fsm_manual_run+0x368>
			break;
 80015ba:	bf00      	nop
 80015bc:	e000      	b.n	80015c0 <fsm_manual_run+0x368>
			break;
 80015be:	bf00      	nop
		}
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200000b8 	.word	0x200000b8
 80015c8:	20000034 	.word	0x20000034
 80015cc:	20000050 	.word	0x20000050
 80015d0:	40010800 	.word	0x40010800
 80015d4:	20000120 	.word	0x20000120
 80015d8:	20000098 	.word	0x20000098
 80015dc:	2000005c 	.word	0x2000005c
 80015e0:	2000009c 	.word	0x2000009c
 80015e4:	200000a0 	.word	0x200000a0
 80015e8:	200000b0 	.word	0x200000b0
 80015ec:	20000048 	.word	0x20000048
 80015f0:	20000058 	.word	0x20000058

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f000 fafa 	bl	8001bf0 <HAL_Init>

  /* USER CODE BEGIN Init */
    status = INIT;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <main+0x34>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
    status_2 =INIT;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <main+0x38>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f814 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 f89a 	bl	8001744 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001610:	f000 f84c 	bl	80016ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <main+0x3c>)
 8001616:	f001 fa57 	bl	8002ac8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  fsm_automatic_run();
 800161a:	f7ff faf9 	bl	8000c10 <fsm_automatic_run>
	 	  fsm_manual_run();
 800161e:	f7ff fe1b 	bl	8001258 <fsm_manual_run>
	 	  fsm_automatic_2_run();
 8001622:	f7ff fca5 	bl	8000f70 <fsm_automatic_2_run>
	  	  fsm_automatic_run();
 8001626:	e7f8      	b.n	800161a <main+0x26>
 8001628:	20000098 	.word	0x20000098
 800162c:	2000009c 	.word	0x2000009c
 8001630:	200000bc 	.word	0x200000bc

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b090      	sub	sp, #64	; 0x40
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fdf8 	bl	8003238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165a:	2301      	movs	r3, #1
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165e:	2310      	movs	r3, #16
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fdf4 	bl	8002258 <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001676:	f000 f8e7 	bl	8001848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	230f      	movs	r3, #15
 800167c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f001 f862 	bl	800275c <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800169e:	f000 f8d3 	bl	8001848 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3740      	adds	r7, #64	; 0x40
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM2_Init+0x94>)
 80016ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM2_Init+0x94>)
 80016d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_TIM2_Init+0x94>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM2_Init+0x94>)
 80016e0:	2209      	movs	r2, #9
 80016e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM2_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM2_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f0:	4813      	ldr	r0, [pc, #76]	; (8001740 <MX_TIM2_Init+0x94>)
 80016f2:	f001 f999 	bl	8002a28 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016fc:	f000 f8a4 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM2_Init+0x94>)
 800170e:	f001 fb2f 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 f896 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001724:	463b      	mov	r3, r7
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM2_Init+0x94>)
 800172a:	f001 fcf7 	bl	800311c <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 f888 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000bc 	.word	0x200000bc

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <MX_GPIO_Init+0xd4>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <MX_GPIO_Init+0xd4>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <MX_GPIO_Init+0xd4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <MX_GPIO_Init+0xd4>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a28      	ldr	r2, [pc, #160]	; (8001818 <MX_GPIO_Init+0xd4>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <MX_GPIO_Init+0xd4>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <MX_GPIO_Init+0xd4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a22      	ldr	r2, [pc, #136]	; (8001818 <MX_GPIO_Init+0xd4>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <MX_GPIO_Init+0xd4>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|LED_RED_Pin
 80017a0:	2200      	movs	r2, #0
 80017a2:	f243 11dc 	movw	r1, #12764	; 0x31dc
 80017a6:	481d      	ldr	r0, [pc, #116]	; (800181c <MX_GPIO_Init+0xd8>)
 80017a8:	f000 fd25 	bl	80021f6 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_YELLOW_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGA1_Pin|SEGA2_Pin|SEGA3_Pin|SEGB4_Pin
 80017ac:	2200      	movs	r2, #0
 80017ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017b2:	481b      	ldr	r0, [pc, #108]	; (8001820 <MX_GPIO_Init+0xdc>)
 80017b4:	f000 fd1f 	bl	80021f6 <HAL_GPIO_WritePin>
                          |SEGB5_Pin|SEGB6_Pin|SEGB7_Pin|EN1_Pin
                          |EN2_Pin|SEGA4_Pin|SEGA5_Pin|SEGA6_Pin
                          |SEGA7_Pin|SEGB1_Pin|SEGB2_Pin|SEGB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80017b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4619      	mov	r1, r3
 80017cc:	4815      	ldr	r0, [pc, #84]	; (8001824 <MX_GPIO_Init+0xe0>)
 80017ce:	f000 fb7f 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED2_Pin LED_GREEN2_Pin LED_YELLOW2_Pin LED_RED_Pin
                           LED_GREEN_Pin LED_YELLOW_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|LED_RED_Pin
 80017d2:	f243 13dc 	movw	r3, #12764	; 0x31dc
 80017d6:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_YELLOW_Pin|EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_GPIO_Init+0xd8>)
 80017ec:	f000 fb70 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGA1_Pin SEGA2_Pin SEGA3_Pin SEGB4_Pin
                           SEGB5_Pin SEGB6_Pin SEGB7_Pin EN1_Pin
                           EN2_Pin SEGA4_Pin SEGA5_Pin SEGA6_Pin
                           SEGA7_Pin SEGB1_Pin SEGB2_Pin SEGB3_Pin */
  GPIO_InitStruct.Pin = SEGA1_Pin|SEGA2_Pin|SEGA3_Pin|SEGB4_Pin
 80017f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f4:	613b      	str	r3, [r7, #16]
                          |SEGB5_Pin|SEGB6_Pin|SEGB7_Pin|EN1_Pin
                          |EN2_Pin|SEGA4_Pin|SEGA5_Pin|SEGA6_Pin
                          |SEGA7_Pin|SEGB1_Pin|SEGB2_Pin|SEGB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2302      	movs	r3, #2
 8001800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_GPIO_Init+0xdc>)
 800180a:	f000 fb61 	bl	8001ed0 <HAL_GPIO_Init>

}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	40010800 	.word	0x40010800
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40011000 	.word	0x40011000

08001828 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
 {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001830:	f000 f8ac 	bl	800198c <timerRun>
	getKeyInput1();
 8001834:	f7fe fce4 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 8001838:	f7fe fd8a 	bl	8000350 <getKeyInput2>
	getKeyInput3();
 800183c:	f7fe fd34 	bl	80002a8 <getKeyInput3>
 }
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <setTimer1>:
int timer3_flag =0;
int timer4_flag =0;
int timer5_flag =0;
int timer6_flag =0;

void setTimer1(int duration){
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <setTimer1+0x28>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	fb92 f3f3 	sdiv	r3, r2, r3
 8001866:	4a06      	ldr	r2, [pc, #24]	; (8001880 <setTimer1+0x2c>)
 8001868:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <setTimer1+0x30>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000060 	.word	0x20000060
 8001880:	20000104 	.word	0x20000104
 8001884:	2000011c 	.word	0x2000011c

08001888 <setTimer2>:
void setTimer2(int duration){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <setTimer2+0x28>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	fb92 f3f3 	sdiv	r3, r2, r3
 800189a:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <setTimer2+0x2c>)
 800189c:	6013      	str	r3, [r2, #0]
	timer2_flag =0;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <setTimer2+0x30>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000060 	.word	0x20000060
 80018b4:	20000108 	.word	0x20000108
 80018b8:	20000120 	.word	0x20000120

080018bc <setTimer3>:
void setTimer3(int duration){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <setTimer3+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ce:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <setTimer3+0x2c>)
 80018d0:	6013      	str	r3, [r2, #0]
	timer3_flag =0;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <setTimer3+0x30>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000060 	.word	0x20000060
 80018e8:	2000010c 	.word	0x2000010c
 80018ec:	20000124 	.word	0x20000124

080018f0 <setTimer4>:
void setTimer4(int duration){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <setTimer4+0x28>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <setTimer4+0x2c>)
 8001904:	6013      	str	r3, [r2, #0]
	timer4_flag =0;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <setTimer4+0x30>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000060 	.word	0x20000060
 800191c:	20000110 	.word	0x20000110
 8001920:	20000128 	.word	0x20000128

08001924 <setTimer5>:
void setTimer5(int duration){
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TIMER_CYCLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <setTimer5+0x28>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	fb92 f3f3 	sdiv	r3, r2, r3
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <setTimer5+0x2c>)
 8001938:	6013      	str	r3, [r2, #0]
	timer5_flag =0;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <setTimer5+0x30>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000060 	.word	0x20000060
 8001950:	20000114 	.word	0x20000114
 8001954:	2000012c 	.word	0x2000012c

08001958 <setTimer6>:
void setTimer6(int duration){
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TIMER_CYCLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <setTimer6+0x28>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	fb92 f3f3 	sdiv	r3, r2, r3
 800196a:	4a06      	ldr	r2, [pc, #24]	; (8001984 <setTimer6+0x2c>)
 800196c:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <setTimer6+0x30>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000060 	.word	0x20000060
 8001984:	20000118 	.word	0x20000118
 8001988:	20000130 	.word	0x20000130

0800198c <timerRun>:
void timerRun(){
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <timerRun+0xcc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dd0b      	ble.n	80019b0 <timerRun+0x24>
		timer1_counter--;
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <timerRun+0xcc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3b01      	subs	r3, #1
 800199e:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <timerRun+0xcc>)
 80019a0:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <timerRun+0xcc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc02      	bgt.n	80019b0 <timerRun+0x24>
		{
			timer1_flag =1;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <timerRun+0xd0>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <timerRun+0xd4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dd0b      	ble.n	80019d0 <timerRun+0x44>
			timer2_counter--;
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <timerRun+0xd4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3b01      	subs	r3, #1
 80019be:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <timerRun+0xd4>)
 80019c0:	6013      	str	r3, [r2, #0]
			if(timer2_counter<=0)
 80019c2:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <timerRun+0xd4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	dc02      	bgt.n	80019d0 <timerRun+0x44>
			{
				timer2_flag =1;
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <timerRun+0xd8>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter > 0){
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <timerRun+0xdc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dd0b      	ble.n	80019f0 <timerRun+0x64>
		timer3_counter--;
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <timerRun+0xdc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <timerRun+0xdc>)
 80019e0:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0)
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <timerRun+0xdc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	dc02      	bgt.n	80019f0 <timerRun+0x64>
		{
			timer3_flag =1;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <timerRun+0xe0>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <timerRun+0xe4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	dd0b      	ble.n	8001a10 <timerRun+0x84>
		timer4_counter--;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <timerRun+0xe4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <timerRun+0xe4>)
 8001a00:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0)
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <timerRun+0xe4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	dc02      	bgt.n	8001a10 <timerRun+0x84>
		{
			timer4_flag =1;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <timerRun+0xe8>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <timerRun+0xec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dd0b      	ble.n	8001a30 <timerRun+0xa4>
		timer5_counter--;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <timerRun+0xec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <timerRun+0xec>)
 8001a20:	6013      	str	r3, [r2, #0]
		if(timer5_counter<=0)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <timerRun+0xec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	dc02      	bgt.n	8001a30 <timerRun+0xa4>
		{
			timer5_flag =1;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <timerRun+0xf0>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <timerRun+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dd0b      	ble.n	8001a50 <timerRun+0xc4>
		timer6_counter--;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <timerRun+0xf4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <timerRun+0xf4>)
 8001a40:	6013      	str	r3, [r2, #0]
		if(timer6_counter<=0)
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <timerRun+0xf4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dc02      	bgt.n	8001a50 <timerRun+0xc4>
		{
			timer6_flag =1;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <timerRun+0xf8>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000104 	.word	0x20000104
 8001a5c:	2000011c 	.word	0x2000011c
 8001a60:	20000108 	.word	0x20000108
 8001a64:	20000120 	.word	0x20000120
 8001a68:	2000010c 	.word	0x2000010c
 8001a6c:	20000124 	.word	0x20000124
 8001a70:	20000110 	.word	0x20000110
 8001a74:	20000128 	.word	0x20000128
 8001a78:	20000114 	.word	0x20000114
 8001a7c:	2000012c 	.word	0x2000012c
 8001a80:	20000118 	.word	0x20000118
 8001a84:	20000130 	.word	0x20000130

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_MspInit+0x60>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_MspInit+0x60>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0b      	ldr	r2, [pc, #44]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201c      	movs	r0, #28
 8001b1c:	f000 f9a1 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b20:	201c      	movs	r0, #28
 8001b22:	f000 f9ba 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f87f 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM2_IRQHandler+0x10>)
 8001b8a:	f000 ffe9 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000bc 	.word	0x200000bc

08001b98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	; (8001bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	; (8001be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bca:	f7ff ffe5 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f001 fb0f 	bl	80031f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd2:	f7ff fd0f 	bl	80015f4 <main>
  bx lr
 8001bd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001be0:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 8001be4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be8:	20000138 	.word	0x20000138

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_Init+0x28>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_Init+0x28>)
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 f923 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c06:	200f      	movs	r0, #15
 8001c08:	f000 f808 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0c:	f7ff ff3c 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x54>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x58>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f93b 	bl	8001eb6 <HAL_SYSTICK_Config>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00e      	b.n	8001c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d80a      	bhi.n	8001c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f000 f903 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_InitTick+0x5c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000064 	.word	0x20000064
 8001c74:	2000006c 	.word	0x2000006c
 8001c78:	20000068 	.word	0x20000068

08001c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x1c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x20>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_IncTick+0x20>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	2000006c 	.word	0x2000006c
 8001c9c:	20000134 	.word	0x20000134

08001ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_GetTick+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000134 	.word	0x20000134

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4906      	ldr	r1, [pc, #24]	; (8001d4c <__NVIC_EnableIRQ+0x34>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff90 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff2d 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff42 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff90 	bl	8001da4 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5f 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff35 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b08b      	sub	sp, #44	; 0x2c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	e161      	b.n	80021a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f040 8150 	bne.w	80021a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a97      	ldr	r2, [pc, #604]	; (8002164 <HAL_GPIO_Init+0x294>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d05e      	beq.n	8001fca <HAL_GPIO_Init+0xfa>
 8001f0c:	4a95      	ldr	r2, [pc, #596]	; (8002164 <HAL_GPIO_Init+0x294>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d875      	bhi.n	8001ffe <HAL_GPIO_Init+0x12e>
 8001f12:	4a95      	ldr	r2, [pc, #596]	; (8002168 <HAL_GPIO_Init+0x298>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d058      	beq.n	8001fca <HAL_GPIO_Init+0xfa>
 8001f18:	4a93      	ldr	r2, [pc, #588]	; (8002168 <HAL_GPIO_Init+0x298>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d86f      	bhi.n	8001ffe <HAL_GPIO_Init+0x12e>
 8001f1e:	4a93      	ldr	r2, [pc, #588]	; (800216c <HAL_GPIO_Init+0x29c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d052      	beq.n	8001fca <HAL_GPIO_Init+0xfa>
 8001f24:	4a91      	ldr	r2, [pc, #580]	; (800216c <HAL_GPIO_Init+0x29c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d869      	bhi.n	8001ffe <HAL_GPIO_Init+0x12e>
 8001f2a:	4a91      	ldr	r2, [pc, #580]	; (8002170 <HAL_GPIO_Init+0x2a0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d04c      	beq.n	8001fca <HAL_GPIO_Init+0xfa>
 8001f30:	4a8f      	ldr	r2, [pc, #572]	; (8002170 <HAL_GPIO_Init+0x2a0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d863      	bhi.n	8001ffe <HAL_GPIO_Init+0x12e>
 8001f36:	4a8f      	ldr	r2, [pc, #572]	; (8002174 <HAL_GPIO_Init+0x2a4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d046      	beq.n	8001fca <HAL_GPIO_Init+0xfa>
 8001f3c:	4a8d      	ldr	r2, [pc, #564]	; (8002174 <HAL_GPIO_Init+0x2a4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d85d      	bhi.n	8001ffe <HAL_GPIO_Init+0x12e>
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d82a      	bhi.n	8001f9c <HAL_GPIO_Init+0xcc>
 8001f46:	2b12      	cmp	r3, #18
 8001f48:	d859      	bhi.n	8001ffe <HAL_GPIO_Init+0x12e>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <HAL_GPIO_Init+0x80>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001fcb 	.word	0x08001fcb
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fb7 	.word	0x08001fb7
 8001f5c:	08001ff9 	.word	0x08001ff9
 8001f60:	08001fff 	.word	0x08001fff
 8001f64:	08001fff 	.word	0x08001fff
 8001f68:	08001fff 	.word	0x08001fff
 8001f6c:	08001fff 	.word	0x08001fff
 8001f70:	08001fff 	.word	0x08001fff
 8001f74:	08001fff 	.word	0x08001fff
 8001f78:	08001fff 	.word	0x08001fff
 8001f7c:	08001fff 	.word	0x08001fff
 8001f80:	08001fff 	.word	0x08001fff
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fff 	.word	0x08001fff
 8001f8c:	08001fff 	.word	0x08001fff
 8001f90:	08001fff 	.word	0x08001fff
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fc1 	.word	0x08001fc1
 8001f9c:	4a76      	ldr	r2, [pc, #472]	; (8002178 <HAL_GPIO_Init+0x2a8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fa2:	e02c      	b.n	8001ffe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	623b      	str	r3, [r7, #32]
          break;
 8001faa:	e029      	b.n	8002000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e024      	b.n	8002000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	3308      	adds	r3, #8
 8001fbc:	623b      	str	r3, [r7, #32]
          break;
 8001fbe:	e01f      	b.n	8002000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	330c      	adds	r3, #12
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e01a      	b.n	8002000 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	623b      	str	r3, [r7, #32]
          break;
 8001fd6:	e013      	b.n	8002000 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	611a      	str	r2, [r3, #16]
          break;
 8001fea:	e009      	b.n	8002000 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fec:	2308      	movs	r3, #8
 8001fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	615a      	str	r2, [r3, #20]
          break;
 8001ff6:	e003      	b.n	8002000 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e000      	b.n	8002000 <HAL_GPIO_Init+0x130>
          break;
 8001ffe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2bff      	cmp	r3, #255	; 0xff
 8002004:	d801      	bhi.n	800200a <HAL_GPIO_Init+0x13a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	e001      	b.n	800200e <HAL_GPIO_Init+0x13e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2bff      	cmp	r3, #255	; 0xff
 8002014:	d802      	bhi.n	800201c <HAL_GPIO_Init+0x14c>
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x152>
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	3b08      	subs	r3, #8
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	210f      	movs	r1, #15
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	6a39      	ldr	r1, [r7, #32]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	431a      	orrs	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a9 	beq.w	80021a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_GPIO_Init+0x2ac>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_GPIO_Init+0x2ac>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_GPIO_Init+0x2ac>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <HAL_GPIO_Init+0x2b0>)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_GPIO_Init+0x2b4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00d      	beq.n	80020b0 <HAL_GPIO_Init+0x1e0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_GPIO_Init+0x2b8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d007      	beq.n	80020ac <HAL_GPIO_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3b      	ldr	r2, [pc, #236]	; (800218c <HAL_GPIO_Init+0x2bc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_GPIO_Init+0x1d8>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e004      	b.n	80020b2 <HAL_GPIO_Init+0x1e2>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e002      	b.n	80020b2 <HAL_GPIO_Init+0x1e2>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_GPIO_Init+0x1e2>
 80020b0:	2300      	movs	r3, #0
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c2:	492f      	ldr	r1, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x2b0>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	492b      	ldr	r1, [pc, #172]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4927      	ldr	r1, [pc, #156]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4921      	ldr	r1, [pc, #132]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	491d      	ldr	r1, [pc, #116]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 800211c:	4013      	ands	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4917      	ldr	r1, [pc, #92]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4913      	ldr	r1, [pc, #76]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 8002144:	4013      	ands	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01f      	beq.n	8002194 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	490d      	ldr	r1, [pc, #52]	; (8002190 <HAL_GPIO_Init+0x2c0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
 8002160:	e01f      	b.n	80021a2 <HAL_GPIO_Init+0x2d2>
 8002162:	bf00      	nop
 8002164:	10320000 	.word	0x10320000
 8002168:	10310000 	.word	0x10310000
 800216c:	10220000 	.word	0x10220000
 8002170:	10210000 	.word	0x10210000
 8002174:	10120000 	.word	0x10120000
 8002178:	10110000 	.word	0x10110000
 800217c:	40021000 	.word	0x40021000
 8002180:	40010000 	.word	0x40010000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00
 800218c:	40011000 	.word	0x40011000
 8002190:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	43db      	mvns	r3, r3
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <HAL_GPIO_Init+0x2f4>)
 800219e:	4013      	ands	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3301      	adds	r3, #1
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f ae96 	bne.w	8001ee4 <HAL_GPIO_Init+0x14>
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	372c      	adds	r7, #44	; 0x2c
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	807b      	strh	r3, [r7, #2]
 8002202:	4613      	mov	r3, r2
 8002204:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002206:	787b      	ldrb	r3, [r7, #1]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002212:	e003      	b.n	800221c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	041a      	lsls	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43d9      	mvns	r1, r3
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e272      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8087 	beq.w	8002386 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002278:	4b92      	ldr	r3, [pc, #584]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b04      	cmp	r3, #4
 8002282:	d00c      	beq.n	800229e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002284:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d112      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
 8002290:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d10b      	bne.n	80022b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d06c      	beq.n	8002384 <HAL_RCC_OscConfig+0x12c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d168      	bne.n	8002384 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e24c      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x76>
 80022c0:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7f      	ldr	r2, [pc, #508]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e02e      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x98>
 80022d6:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a77      	ldr	r2, [pc, #476]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e01d      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0xbc>
 80022fa:	4b72      	ldr	r3, [pc, #456]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0xd4>
 8002314:	4b6b      	ldr	r3, [pc, #428]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b68      	ldr	r3, [pc, #416]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a67      	ldr	r2, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fcb4 	bl	8001ca0 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fcb0 	bl	8001ca0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e200      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0xe4>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fca0 	bl	8001ca0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fc9c 	bl	8001ca0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1ec      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x10c>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d116      	bne.n	80023e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1c0      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4939      	ldr	r1, [pc, #228]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	e03a      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ec:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCC_OscConfig+0x270>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fc55 	bl	8001ca0 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff fc51 	bl	8001ca0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e1a1      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]
 800242c:	e015      	b.n	800245a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x270>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff fc34 	bl	8001ca0 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff fc30 	bl	8001ca0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e180      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d03a      	beq.n	80024dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d019      	beq.n	80024a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002474:	f7ff fc14 	bl	8001ca0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7ff fc10 	bl	8001ca0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e160      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f000 faa6 	bl	80029ec <RCC_Delay>
 80024a0:	e01c      	b.n	80024dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_OscConfig+0x274>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7ff fbfa 	bl	8001ca0 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	e00f      	b.n	80024d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff fbf6 	bl	8001ca0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d908      	bls.n	80024d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e146      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	42420000 	.word	0x42420000
 80024cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b92      	ldr	r3, [pc, #584]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e9      	bne.n	80024b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a6 	beq.w	8002636 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ee:	4b8b      	ldr	r3, [pc, #556]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a87      	ldr	r2, [pc, #540]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b85      	ldr	r3, [pc, #532]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_OscConfig+0x4c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d118      	bne.n	8002554 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002522:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <HAL_RCC_OscConfig+0x4c8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7e      	ldr	r2, [pc, #504]	; (8002720 <HAL_RCC_OscConfig+0x4c8>)
 8002528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252e:	f7ff fbb7 	bl	8001ca0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002536:	f7ff fbb3 	bl	8001ca0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e103      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	4b75      	ldr	r3, [pc, #468]	; (8002720 <HAL_RCC_OscConfig+0x4c8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x312>
 800255c:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a6e      	ldr	r2, [pc, #440]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0x334>
 8002572:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a69      	ldr	r2, [pc, #420]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a66      	ldr	r2, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x356>
 8002594:	4b61      	ldr	r3, [pc, #388]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a60      	ldr	r2, [pc, #384]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a5d      	ldr	r2, [pc, #372]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x36e>
 80025ae:	4b5b      	ldr	r3, [pc, #364]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a5a      	ldr	r2, [pc, #360]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a57      	ldr	r2, [pc, #348]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7ff fb67 	bl	8001ca0 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7ff fb63 	bl	8001ca0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0b1      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b4b      	ldr	r3, [pc, #300]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x37e>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7ff fb51 	bl	8001ca0 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7ff fb4d 	bl	8001ca0 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e09b      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b40      	ldr	r3, [pc, #256]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	4a3b      	ldr	r2, [pc, #236]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8087 	beq.w	800274e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d061      	beq.n	8002710 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d146      	bne.n	80026e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff fb21 	bl	8001ca0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff fb1d 	bl	8001ca0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e06d      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4921      	ldr	r1, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a19      	ldr	r1, [r3, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	430b      	orrs	r3, r1
 80026ae:	491b      	ldr	r1, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x4cc>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7ff faf1 	bl	8001ca0 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7ff faed 	bl	8001ca0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e03d      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46a>
 80026e0:	e035      	b.n	800274e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fada 	bl	8001ca0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7ff fad6 	bl	8001ca0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e026      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_OscConfig+0x4c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x498>
 800270e:	e01e      	b.n	800274e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e019      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x500>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0d0      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002770:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d910      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b67      	ldr	r3, [pc, #412]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 0207 	bic.w	r2, r3, #7
 8002786:	4965      	ldr	r1, [pc, #404]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b63      	ldr	r3, [pc, #396]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b8      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b8:	4b59      	ldr	r3, [pc, #356]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a52      	ldr	r2, [pc, #328]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	494d      	ldr	r1, [pc, #308]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d040      	beq.n	800287c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d115      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07f      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e073      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06b      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4936      	ldr	r1, [pc, #216]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7ff fa28 	bl	8001ca0 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7ff fa24 	bl	8001ca0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e053      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 020c 	and.w	r2, r3, #12
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1eb      	bne.n	8002854 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d210      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4922      	ldr	r1, [pc, #136]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e032      	b.n	8002912 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4916      	ldr	r1, [pc, #88]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028d6:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	490e      	ldr	r1, [pc, #56]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ea:	f000 f821 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	490a      	ldr	r1, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	5ccb      	ldrb	r3, [r1, r3]
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1cc>)
 8002904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1d0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f986 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	08003270 	.word	0x08003270
 8002928:	20000064 	.word	0x20000064
 800292c:	20000068 	.word	0x20000068

08002930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b490      	push	{r4, r7}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCC_GetSysClockFreq+0xac>)
 8002938:	1d3c      	adds	r4, r7, #4
 800293a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800293c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002940:	f240 2301 	movw	r3, #513	; 0x201
 8002944:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d002      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x40>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x46>
 800296e:	e02b      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002972:	623b      	str	r3, [r7, #32]
      break;
 8002974:	e02b      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	0c9b      	lsrs	r3, r3, #18
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3328      	adds	r3, #40	; 0x28
 8002980:	443b      	add	r3, r7
 8002982:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002986:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d012      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0c5b      	lsrs	r3, r3, #17
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	3328      	adds	r3, #40	; 0x28
 800299e:	443b      	add	r3, r7
 80029a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029aa:	fb03 f202 	mul.w	r2, r3, r2
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e004      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	623b      	str	r3, [r7, #32]
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ca:	623b      	str	r3, [r7, #32]
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc90      	pop	{r4, r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	08003260 	.word	0x08003260
 80029e0:	40021000 	.word	0x40021000
 80029e4:	007a1200 	.word	0x007a1200
 80029e8:	003d0900 	.word	0x003d0900

080029ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCC_Delay+0x34>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <RCC_Delay+0x38>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a08:	bf00      	nop
  }
  while (Delay --);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f9      	bne.n	8002a08 <RCC_Delay+0x1c>
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000064 	.word	0x20000064
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e041      	b.n	8002abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff f84c 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 fa6a 	bl	8002f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d001      	beq.n	8002ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e035      	b.n	8002b4c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_TIM_Base_Start_IT+0x90>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x4e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x4e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_TIM_Base_Start_IT+0x94>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d010      	beq.n	8002b4a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	e007      	b.n	8002b4a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9b1 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9a4 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9b3 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f987 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f97a 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f989 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0208 	mvn.w	r2, #8
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f95d 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f950 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f95f 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f933 	bl	8002f0a <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f926 	bl	8002ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f935 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fda2 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa67 	bl	80031de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8f9 	bl	8002f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0220 	mvn.w	r2, #32
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa32 	bl	80031cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_TIM_ConfigClockSource+0x18>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0b3      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x180>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc0:	d03e      	beq.n	8002e40 <HAL_TIM_ConfigClockSource+0xd0>
 8002dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc6:	f200 8087 	bhi.w	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	f000 8085 	beq.w	8002edc <HAL_TIM_ConfigClockSource+0x16c>
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	d87f      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d01a      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0xa2>
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d87b      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d050      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x116>
 8002de4:	2b60      	cmp	r3, #96	; 0x60
 8002de6:	d877      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002de8:	2b50      	cmp	r3, #80	; 0x50
 8002dea:	d03c      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0xf6>
 8002dec:	2b50      	cmp	r3, #80	; 0x50
 8002dee:	d873      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d058      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x136>
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d86f      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002df8:	2b30      	cmp	r3, #48	; 0x30
 8002dfa:	d064      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x156>
 8002dfc:	2b30      	cmp	r3, #48	; 0x30
 8002dfe:	d86b      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d060      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x156>
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d867      	bhi.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d05c      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x156>
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d05a      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e10:	e062      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6899      	ldr	r1, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f000 f95c 	bl	80030de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	609a      	str	r2, [r3, #8]
      break;
 8002e3e:	e04e      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6899      	ldr	r1, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f000 f945 	bl	80030de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e62:	609a      	str	r2, [r3, #8]
      break;
 8002e64:	e03b      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 f8bc 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2150      	movs	r1, #80	; 0x50
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f913 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002e84:	e02b      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 f8da 	bl	800304c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2160      	movs	r1, #96	; 0x60
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f903 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e01b      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f000 f89c 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2140      	movs	r1, #64	; 0x40
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f8f3 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f000 f8ea 	bl	80030aa <TIM_ITRx_SetConfig>
        break;
 8002ed6:	e002      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002edc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <TIM_Base_SetConfig+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_Base_SetConfig+0x28>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d003      	beq.n	8002f68 <TIM_Base_SetConfig+0x28>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a22      	ldr	r2, [pc, #136]	; (8002fec <TIM_Base_SetConfig+0xac>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <TIM_Base_SetConfig+0xa8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x52>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x52>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a17      	ldr	r2, [pc, #92]	; (8002fec <TIM_Base_SetConfig+0xac>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <TIM_Base_SetConfig+0xa8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d103      	bne.n	8002fd8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	615a      	str	r2, [r3, #20]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400

08002ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 030a 	bic.w	r3, r3, #10
 800302c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f023 0210 	bic.w	r2, r3, #16
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003076:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	031b      	lsls	r3, r3, #12
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f043 0307 	orr.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	431a      	orrs	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4313      	orrs	r3, r2
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003130:	2302      	movs	r3, #2
 8003132:	e041      	b.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003180:	d004      	beq.n	800318c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10c      	bne.n	80031a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40000400 	.word	0x40000400

080031cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <__libc_init_array>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	2600      	movs	r6, #0
 80031f4:	4d0c      	ldr	r5, [pc, #48]	; (8003228 <__libc_init_array+0x38>)
 80031f6:	4c0d      	ldr	r4, [pc, #52]	; (800322c <__libc_init_array+0x3c>)
 80031f8:	1b64      	subs	r4, r4, r5
 80031fa:	10a4      	asrs	r4, r4, #2
 80031fc:	42a6      	cmp	r6, r4
 80031fe:	d109      	bne.n	8003214 <__libc_init_array+0x24>
 8003200:	f000 f822 	bl	8003248 <_init>
 8003204:	2600      	movs	r6, #0
 8003206:	4d0a      	ldr	r5, [pc, #40]	; (8003230 <__libc_init_array+0x40>)
 8003208:	4c0a      	ldr	r4, [pc, #40]	; (8003234 <__libc_init_array+0x44>)
 800320a:	1b64      	subs	r4, r4, r5
 800320c:	10a4      	asrs	r4, r4, #2
 800320e:	42a6      	cmp	r6, r4
 8003210:	d105      	bne.n	800321e <__libc_init_array+0x2e>
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	f855 3b04 	ldr.w	r3, [r5], #4
 8003218:	4798      	blx	r3
 800321a:	3601      	adds	r6, #1
 800321c:	e7ee      	b.n	80031fc <__libc_init_array+0xc>
 800321e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003222:	4798      	blx	r3
 8003224:	3601      	adds	r6, #1
 8003226:	e7f2      	b.n	800320e <__libc_init_array+0x1e>
 8003228:	08003280 	.word	0x08003280
 800322c:	08003280 	.word	0x08003280
 8003230:	08003280 	.word	0x08003280
 8003234:	08003284 	.word	0x08003284

08003238 <memset>:
 8003238:	4603      	mov	r3, r0
 800323a:	4402      	add	r2, r0
 800323c:	4293      	cmp	r3, r2
 800323e:	d100      	bne.n	8003242 <memset+0xa>
 8003240:	4770      	bx	lr
 8003242:	f803 1b01 	strb.w	r1, [r3], #1
 8003246:	e7f9      	b.n	800323c <memset+0x4>

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
